{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blessing\\\\jogo-memoria\\\\frontend\\\\src\\\\components\\\\Multiplayer\\\\MultiplayerGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport Card from '../Card';\nimport ScorePanel from '../ScorePanel';\nimport MultiplayerService from '../../services/MultiplayerService';\nimport AuthService from '../../services/AuthService';\nimport ThemeService from '../../services/ThemeService';\nimport './MultiplayerGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MultiplayerGame = () => {\n  _s();\n  const {\n    roomId,\n    themeId,\n    difficulty\n  } = useParams();\n  const navigate = useNavigate();\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n  const [moves, setMoves] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [theme, setTheme] = useState(null);\n  const [players, setPlayers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [chatMessage, setChatMessage] = useState('');\n\n  // Obter usuário atual\n  const currentUser = AuthService.getCurrentUser();\n  const username = currentUser ? currentUser.username : 'Anonymous';\n  useEffect(() => {\n    if (!AuthService.isAuthenticated()) {\n      toast.error('Você precisa estar logado para jogar multiplayer');\n      navigate('/login');\n      return;\n    }\n\n    // Carregar cartas para o tema selecionado\n    const loadCards = async () => {\n      try {\n        setLoading(true);\n        const themeData = await ThemeService.getThemeById(themeId);\n        setTheme(themeData);\n        const cardData = await ThemeService.getCardsForTheme(themeId, difficulty);\n        setCards(cardData);\n        setLoading(false);\n      } catch (error) {\n        console.error('Erro ao carregar cartas:', error);\n        toast.error('Erro ao carregar o jogo');\n        setLoading(false);\n      }\n    };\n    loadCards();\n\n    // Conectar ao WebSocket\n    MultiplayerService.connect({\n      onConnect: () => {\n        console.log('Conectado ao jogo multiplayer');\n        MultiplayerService.joinRoom(roomId, username);\n      },\n      onDisconnect: () => {\n        console.log('Desconectado do jogo multiplayer');\n      },\n      onMessage: message => {\n        console.log('Mensagem recebida:', message);\n        switch (message.type) {\n          case 'join':\n            if (message.senderId !== username) {\n              toast.info(`${message.senderId} entrou na sala`);\n              setPlayers(prev => {\n                if (!prev.includes(message.senderId)) {\n                  return [...prev, message.senderId];\n                }\n                return prev;\n              });\n            }\n            break;\n          case 'leave':\n            if (message.senderId !== username) {\n              toast.info(`${message.senderId} saiu da sala`);\n              setPlayers(prev => prev.filter(player => player !== message.senderId));\n            }\n            break;\n          case 'move':\n            if (message.senderId !== username) {\n              // Processar movimento de outro jogador\n              handleRemoteCardFlip(message.content.cardId);\n            }\n            break;\n          case 'chat':\n            setMessages(prev => [...prev, message]);\n            break;\n          default:\n            break;\n        }\n      },\n      onError: error => {\n        console.error('Erro na conexão WebSocket:', error);\n        toast.error('Erro na conexão. Tente novamente.');\n      }\n    });\n    return () => {\n      // Desconectar ao sair\n      MultiplayerService.disconnect();\n    };\n  }, [roomId, themeId, difficulty, username, navigate]);\n  const handleCardClick = id => {\n    // Ignora cliques se o jogo estiver carregando, acabou, ou mais de duas cartas estiverem viradas\n    if (loading || gameOver || flippedCards.length >= 2 || matchedPairs.includes(id) || flippedCards.includes(id)) {\n      return;\n    }\n\n    // Adiciona a carta à lista de cartas viradas\n    const newFlippedCards = [...flippedCards, id];\n    setFlippedCards(newFlippedCards);\n\n    // Envia o movimento para outros jogadores\n    MultiplayerService.sendMove(id);\n\n    // Se esta é a segunda carta virada\n    if (newFlippedCards.length === 2) {\n      setMoves(moves + 1);\n      const [firstCardId, secondCardId] = newFlippedCards;\n      const firstCard = cards.find(card => card.id === firstCardId);\n      const secondCard = cards.find(card => card.id === secondCardId);\n\n      // Verifica se as cartas formam um par\n      if (firstCard.value === secondCard.value) {\n        // Adiciona as cartas à lista de pares formados\n        setMatchedPairs([...matchedPairs, firstCardId, secondCardId]);\n        setFlippedCards([]);\n\n        // Verifica se todas as cartas foram encontradas\n        if (matchedPairs.length + 2 === cards.length) {\n          setGameOver(true);\n          MultiplayerService.sendMessage('gameOver', {\n            winner: username,\n            moves\n          });\n        }\n      } else {\n        // Se não formarem um par, vira as cartas de volta após um tempo\n        setTimeout(() => {\n          setFlippedCards([]);\n        }, 1000);\n      }\n    }\n  };\n  const handleRemoteCardFlip = id => {\n    // Processa o movimento de um jogador remoto\n    const newFlippedCards = [...flippedCards, id];\n    setFlippedCards(newFlippedCards);\n    if (newFlippedCards.length === 2) {\n      const [firstCardId, secondCardId] = newFlippedCards;\n      const firstCard = cards.find(card => card.id === firstCardId);\n      const secondCard = cards.find(card => card.id === secondCardId);\n      if (firstCard.value === secondCard.value) {\n        setMatchedPairs([...matchedPairs, firstCardId, secondCardId]);\n        setFlippedCards([]);\n      } else {\n        setTimeout(() => {\n          setFlippedCards([]);\n        }, 1000);\n      }\n    }\n  };\n  const handleSendMessage = e => {\n    e.preventDefault();\n    if (!chatMessage.trim()) return;\n    MultiplayerService.sendChatMessage(chatMessage);\n    setChatMessage('');\n  };\n  const exitGame = () => {\n    MultiplayerService.disconnect();\n    navigate('/');\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"multiplayer-game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"multiplayer-game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Jogo da Mem\\xF3ria - Multiplayer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: theme ? theme.name : 'Tema'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Sala: \", roomId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Dificuldade: \", difficulty]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ScorePanel, {\n        moves: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n          id: card.id,\n          value: card.value,\n          isFlipped: flippedCards.includes(card.id) || matchedPairs.includes(card.id),\n          isMatched: matchedPairs.includes(card.id),\n          onClick: () => handleCardClick(card.id)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-over\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Parab\\xE9ns!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Voc\\xEA completou o jogo em \", moves, \" movimentos!\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: exitGame,\n          children: \"Sair do Jogo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"multiplayer-sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"players-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Jogadores\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"current-player\",\n            children: [username, \" (Voc\\xEA)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), players.filter(player => player !== username).map(player => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: player\n          }, player, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Chat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `message ${msg.senderId === username ? 'own-message' : 'other-message'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sender\",\n              children: [msg.senderId, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"content\",\n              children: msg.content.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSendMessage,\n          className: \"chat-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: chatMessage,\n            onChange: e => setChatMessage(e.target.value),\n            placeholder: \"Digite uma mensagem...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Enviar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: exitGame,\n        className: \"exit-button\",\n        children: \"Sair do Jogo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n_s(MultiplayerGame, \"7OzRkse/M/kw/rqdvg8z/He+xuY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = MultiplayerGame;\nexport default MultiplayerGame;\nvar _c;\n$RefreshReg$(_c, \"MultiplayerGame\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","toast","Card","ScorePanel","MultiplayerService","AuthService","ThemeService","jsxDEV","_jsxDEV","MultiplayerGame","_s","roomId","themeId","difficulty","navigate","cards","setCards","flippedCards","setFlippedCards","matchedPairs","setMatchedPairs","moves","setMoves","gameOver","setGameOver","loading","setLoading","theme","setTheme","players","setPlayers","messages","setMessages","chatMessage","setChatMessage","currentUser","getCurrentUser","username","isAuthenticated","error","loadCards","themeData","getThemeById","cardData","getCardsForTheme","console","connect","onConnect","log","joinRoom","onDisconnect","onMessage","message","type","senderId","info","prev","includes","filter","player","handleRemoteCardFlip","content","cardId","onError","disconnect","handleCardClick","id","length","newFlippedCards","sendMove","firstCardId","secondCardId","firstCard","find","card","secondCard","value","sendMessage","winner","setTimeout","handleSendMessage","e","preventDefault","trim","sendChatMessage","exitGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","map","isFlipped","isMatched","onClick","msg","index","text","onSubmit","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/components/Multiplayer/MultiplayerGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport Card from '../Card';\r\nimport ScorePanel from '../ScorePanel';\r\nimport MultiplayerService from '../../services/MultiplayerService';\r\nimport AuthService from '../../services/AuthService';\r\nimport ThemeService from '../../services/ThemeService';\r\nimport './MultiplayerGame.css';\r\n\r\nconst MultiplayerGame = () => {\r\n  const { roomId, themeId, difficulty } = useParams();\r\n  const navigate = useNavigate();\r\n  \r\n  const [cards, setCards] = useState([]);\r\n  const [flippedCards, setFlippedCards] = useState([]);\r\n  const [matchedPairs, setMatchedPairs] = useState([]);\r\n  const [moves, setMoves] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [theme, setTheme] = useState(null);\r\n  const [players, setPlayers] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  \r\n  // Obter usuário atual\r\n  const currentUser = AuthService.getCurrentUser();\r\n  const username = currentUser ? currentUser.username : 'Anonymous';\r\n  \r\n  useEffect(() => {\r\n    if (!AuthService.isAuthenticated()) {\r\n      toast.error('Você precisa estar logado para jogar multiplayer');\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    \r\n    // Carregar cartas para o tema selecionado\r\n    const loadCards = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const themeData = await ThemeService.getThemeById(themeId);\r\n        setTheme(themeData);\r\n        \r\n        const cardData = await ThemeService.getCardsForTheme(themeId, difficulty);\r\n        setCards(cardData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Erro ao carregar cartas:', error);\r\n        toast.error('Erro ao carregar o jogo');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadCards();\r\n    \r\n    // Conectar ao WebSocket\r\n    MultiplayerService.connect({\r\n      onConnect: () => {\r\n        console.log('Conectado ao jogo multiplayer');\r\n        MultiplayerService.joinRoom(roomId, username);\r\n      },\r\n      onDisconnect: () => {\r\n        console.log('Desconectado do jogo multiplayer');\r\n      },\r\n      onMessage: (message) => {\r\n        console.log('Mensagem recebida:', message);\r\n        \r\n        switch (message.type) {\r\n          case 'join':\r\n            if (message.senderId !== username) {\r\n              toast.info(`${message.senderId} entrou na sala`);\r\n              setPlayers(prev => {\r\n                if (!prev.includes(message.senderId)) {\r\n                  return [...prev, message.senderId];\r\n                }\r\n                return prev;\r\n              });\r\n            }\r\n            break;\r\n            \r\n          case 'leave':\r\n            if (message.senderId !== username) {\r\n              toast.info(`${message.senderId} saiu da sala`);\r\n              setPlayers(prev => prev.filter(player => player !== message.senderId));\r\n            }\r\n            break;\r\n            \r\n          case 'move':\r\n            if (message.senderId !== username) {\r\n              // Processar movimento de outro jogador\r\n              handleRemoteCardFlip(message.content.cardId);\r\n            }\r\n            break;\r\n            \r\n          case 'chat':\r\n            setMessages(prev => [...prev, message]);\r\n            break;\r\n            \r\n          default:\r\n            break;\r\n        }\r\n      },\r\n      onError: (error) => {\r\n        console.error('Erro na conexão WebSocket:', error);\r\n        toast.error('Erro na conexão. Tente novamente.');\r\n      }\r\n    });\r\n    \r\n    return () => {\r\n      // Desconectar ao sair\r\n      MultiplayerService.disconnect();\r\n    };\r\n  }, [roomId, themeId, difficulty, username, navigate]);\r\n  \r\n  const handleCardClick = (id) => {\r\n    // Ignora cliques se o jogo estiver carregando, acabou, ou mais de duas cartas estiverem viradas\r\n    if (loading || gameOver || flippedCards.length >= 2 || matchedPairs.includes(id) || flippedCards.includes(id)) {\r\n      return;\r\n    }\r\n    \r\n    // Adiciona a carta à lista de cartas viradas\r\n    const newFlippedCards = [...flippedCards, id];\r\n    setFlippedCards(newFlippedCards);\r\n    \r\n    // Envia o movimento para outros jogadores\r\n    MultiplayerService.sendMove(id);\r\n    \r\n    // Se esta é a segunda carta virada\r\n    if (newFlippedCards.length === 2) {\r\n      setMoves(moves + 1);\r\n      \r\n      const [firstCardId, secondCardId] = newFlippedCards;\r\n      const firstCard = cards.find(card => card.id === firstCardId);\r\n      const secondCard = cards.find(card => card.id === secondCardId);\r\n      \r\n      // Verifica se as cartas formam um par\r\n      if (firstCard.value === secondCard.value) {\r\n        // Adiciona as cartas à lista de pares formados\r\n        setMatchedPairs([...matchedPairs, firstCardId, secondCardId]);\r\n        setFlippedCards([]);\r\n        \r\n        // Verifica se todas as cartas foram encontradas\r\n        if (matchedPairs.length + 2 === cards.length) {\r\n          setGameOver(true);\r\n          MultiplayerService.sendMessage('gameOver', { winner: username, moves });\r\n        }\r\n      } else {\r\n        // Se não formarem um par, vira as cartas de volta após um tempo\r\n        setTimeout(() => {\r\n          setFlippedCards([]);\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleRemoteCardFlip = (id) => {\r\n    // Processa o movimento de um jogador remoto\r\n    const newFlippedCards = [...flippedCards, id];\r\n    setFlippedCards(newFlippedCards);\r\n    \r\n    if (newFlippedCards.length === 2) {\r\n      const [firstCardId, secondCardId] = newFlippedCards;\r\n      const firstCard = cards.find(card => card.id === firstCardId);\r\n      const secondCard = cards.find(card => card.id === secondCardId);\r\n      \r\n      if (firstCard.value === secondCard.value) {\r\n        setMatchedPairs([...matchedPairs, firstCardId, secondCardId]);\r\n        setFlippedCards([]);\r\n      } else {\r\n        setTimeout(() => {\r\n          setFlippedCards([]);\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!chatMessage.trim()) return;\r\n    \r\n    MultiplayerService.sendChatMessage(chatMessage);\r\n    setChatMessage('');\r\n  };\r\n  \r\n  const exitGame = () => {\r\n    MultiplayerService.disconnect();\r\n    navigate('/');\r\n  };\r\n  \r\n  if (loading) {\r\n    return <div className=\"loading\">Carregando...</div>;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"multiplayer-game-container\">\r\n      <div className=\"multiplayer-game\">\r\n        <h1>Jogo da Memória - Multiplayer</h1>\r\n        <div className=\"game-info\">\r\n          <h2>{theme ? theme.name : 'Tema'}</h2>\r\n          <p>Sala: {roomId}</p>\r\n          <p>Dificuldade: {difficulty}</p>\r\n        </div>\r\n        \r\n        <ScorePanel moves={moves} />\r\n        \r\n        <div className=\"game-board\">\r\n          {cards.map(card => (\r\n            <Card \r\n              key={card.id} \r\n              id={card.id}\r\n              value={card.value}\r\n              isFlipped={flippedCards.includes(card.id) || matchedPairs.includes(card.id)}\r\n              isMatched={matchedPairs.includes(card.id)}\r\n              onClick={() => handleCardClick(card.id)}\r\n            />\r\n          ))}\r\n        </div>\r\n        \r\n        {gameOver && (\r\n          <div className=\"game-over\">\r\n            <h2>Parabéns!</h2>\r\n            <p>Você completou o jogo em {moves} movimentos!</p>\r\n            <button onClick={exitGame}>Sair do Jogo</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"multiplayer-sidebar\">\r\n        <div className=\"players-list\">\r\n          <h3>Jogadores</h3>\r\n          <ul>\r\n            <li className=\"current-player\">{username} (Você)</li>\r\n            {players.filter(player => player !== username).map(player => (\r\n              <li key={player}>{player}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        \r\n        <div className=\"chat-box\">\r\n          <h3>Chat</h3>\r\n          <div className=\"messages\">\r\n            {messages.map((msg, index) => (\r\n              <div \r\n                key={index} \r\n                className={`message ${msg.senderId === username ? 'own-message' : 'other-message'}`}\r\n              >\r\n                <span className=\"sender\">{msg.senderId}:</span>\r\n                <span className=\"content\">{msg.content.text}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          \r\n          <form onSubmit={handleSendMessage} className=\"chat-form\">\r\n            <input \r\n              type=\"text\" \r\n              value={chatMessage} \r\n              onChange={(e) => setChatMessage(e.target.value)}\r\n              placeholder=\"Digite uma mensagem...\"\r\n            />\r\n            <button type=\"submit\">Enviar</button>\r\n          </form>\r\n        </div>\r\n        \r\n        <button onClick={exitGame} className=\"exit-button\">Sair do Jogo</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultiplayerGame; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAOC,kBAAkB,MAAM,mCAAmC;AAClE,OAAOC,WAAW,MAAM,4BAA4B;AACpD,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC,MAAM;IAAEC,OAAO;IAAEC;EAAW,CAAC,GAAGd,SAAS,CAAC,CAAC;EACnD,MAAMe,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAE9B,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACsB,YAAY,EAAEC,eAAe,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACwB,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAAC0B,QAAQ,EAAEC,WAAW,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC4B,OAAO,EAAEC,UAAU,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC8B,KAAK,EAAEC,QAAQ,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACgC,OAAO,EAAEC,UAAU,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACkC,QAAQ,EAAEC,WAAW,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACoC,WAAW,EAAEC,cAAc,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;;EAElD;EACA,MAAMsC,WAAW,GAAG9B,WAAW,CAAC+B,cAAc,CAAC,CAAC;EAChD,MAAMC,QAAQ,GAAGF,WAAW,GAAGA,WAAW,CAACE,QAAQ,GAAG,WAAW;EAEjEvC,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,WAAW,CAACiC,eAAe,CAAC,CAAC,EAAE;MAClCrC,KAAK,CAACsC,KAAK,CAAC,kDAAkD,CAAC;MAC/DzB,QAAQ,CAAC,QAAQ,CAAC;MAClB;IACF;;IAEA;IACA,MAAM0B,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFd,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMe,SAAS,GAAG,MAAMnC,YAAY,CAACoC,YAAY,CAAC9B,OAAO,CAAC;QAC1DgB,QAAQ,CAACa,SAAS,CAAC;QAEnB,MAAME,QAAQ,GAAG,MAAMrC,YAAY,CAACsC,gBAAgB,CAAChC,OAAO,EAAEC,UAAU,CAAC;QACzEG,QAAQ,CAAC2B,QAAQ,CAAC;QAClBjB,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOa,KAAK,EAAE;QACdM,OAAO,CAACN,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChDtC,KAAK,CAACsC,KAAK,CAAC,yBAAyB,CAAC;QACtCb,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDc,SAAS,CAAC,CAAC;;IAEX;IACApC,kBAAkB,CAAC0C,OAAO,CAAC;MACzBC,SAAS,EAAEA,CAAA,KAAM;QACfF,OAAO,CAACG,GAAG,CAAC,+BAA+B,CAAC;QAC5C5C,kBAAkB,CAAC6C,QAAQ,CAACtC,MAAM,EAAE0B,QAAQ,CAAC;MAC/C,CAAC;MACDa,YAAY,EAAEA,CAAA,KAAM;QAClBL,OAAO,CAACG,GAAG,CAAC,kCAAkC,CAAC;MACjD,CAAC;MACDG,SAAS,EAAGC,OAAO,IAAK;QACtBP,OAAO,CAACG,GAAG,CAAC,oBAAoB,EAAEI,OAAO,CAAC;QAE1C,QAAQA,OAAO,CAACC,IAAI;UAClB,KAAK,MAAM;YACT,IAAID,OAAO,CAACE,QAAQ,KAAKjB,QAAQ,EAAE;cACjCpC,KAAK,CAACsD,IAAI,CAAC,GAAGH,OAAO,CAACE,QAAQ,iBAAiB,CAAC;cAChDxB,UAAU,CAAC0B,IAAI,IAAI;gBACjB,IAAI,CAACA,IAAI,CAACC,QAAQ,CAACL,OAAO,CAACE,QAAQ,CAAC,EAAE;kBACpC,OAAO,CAAC,GAAGE,IAAI,EAAEJ,OAAO,CAACE,QAAQ,CAAC;gBACpC;gBACA,OAAOE,IAAI;cACb,CAAC,CAAC;YACJ;YACA;UAEF,KAAK,OAAO;YACV,IAAIJ,OAAO,CAACE,QAAQ,KAAKjB,QAAQ,EAAE;cACjCpC,KAAK,CAACsD,IAAI,CAAC,GAAGH,OAAO,CAACE,QAAQ,eAAe,CAAC;cAC9CxB,UAAU,CAAC0B,IAAI,IAAIA,IAAI,CAACE,MAAM,CAACC,MAAM,IAAIA,MAAM,KAAKP,OAAO,CAACE,QAAQ,CAAC,CAAC;YACxE;YACA;UAEF,KAAK,MAAM;YACT,IAAIF,OAAO,CAACE,QAAQ,KAAKjB,QAAQ,EAAE;cACjC;cACAuB,oBAAoB,CAACR,OAAO,CAACS,OAAO,CAACC,MAAM,CAAC;YAC9C;YACA;UAEF,KAAK,MAAM;YACT9B,WAAW,CAACwB,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEJ,OAAO,CAAC,CAAC;YACvC;UAEF;YACE;QACJ;MACF,CAAC;MACDW,OAAO,EAAGxB,KAAK,IAAK;QAClBM,OAAO,CAACN,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDtC,KAAK,CAACsC,KAAK,CAAC,mCAAmC,CAAC;MAClD;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACX;MACAnC,kBAAkB,CAAC4D,UAAU,CAAC,CAAC;IACjC,CAAC;EACH,CAAC,EAAE,CAACrD,MAAM,EAAEC,OAAO,EAAEC,UAAU,EAAEwB,QAAQ,EAAEvB,QAAQ,CAAC,CAAC;EAErD,MAAMmD,eAAe,GAAIC,EAAE,IAAK;IAC9B;IACA,IAAIzC,OAAO,IAAIF,QAAQ,IAAIN,YAAY,CAACkD,MAAM,IAAI,CAAC,IAAIhD,YAAY,CAACsC,QAAQ,CAACS,EAAE,CAAC,IAAIjD,YAAY,CAACwC,QAAQ,CAACS,EAAE,CAAC,EAAE;MAC7G;IACF;;IAEA;IACA,MAAME,eAAe,GAAG,CAAC,GAAGnD,YAAY,EAAEiD,EAAE,CAAC;IAC7ChD,eAAe,CAACkD,eAAe,CAAC;;IAEhC;IACAhE,kBAAkB,CAACiE,QAAQ,CAACH,EAAE,CAAC;;IAE/B;IACA,IAAIE,eAAe,CAACD,MAAM,KAAK,CAAC,EAAE;MAChC7C,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MAEnB,MAAM,CAACiD,WAAW,EAAEC,YAAY,CAAC,GAAGH,eAAe;MACnD,MAAMI,SAAS,GAAGzD,KAAK,CAAC0D,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACR,EAAE,KAAKI,WAAW,CAAC;MAC7D,MAAMK,UAAU,GAAG5D,KAAK,CAAC0D,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACR,EAAE,KAAKK,YAAY,CAAC;;MAE/D;MACA,IAAIC,SAAS,CAACI,KAAK,KAAKD,UAAU,CAACC,KAAK,EAAE;QACxC;QACAxD,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAEmD,WAAW,EAAEC,YAAY,CAAC,CAAC;QAC7DrD,eAAe,CAAC,EAAE,CAAC;;QAEnB;QACA,IAAIC,YAAY,CAACgD,MAAM,GAAG,CAAC,KAAKpD,KAAK,CAACoD,MAAM,EAAE;UAC5C3C,WAAW,CAAC,IAAI,CAAC;UACjBpB,kBAAkB,CAACyE,WAAW,CAAC,UAAU,EAAE;YAAEC,MAAM,EAAEzC,QAAQ;YAAEhB;UAAM,CAAC,CAAC;QACzE;MACF,CAAC,MAAM;QACL;QACA0D,UAAU,CAAC,MAAM;UACf7D,eAAe,CAAC,EAAE,CAAC;QACrB,CAAC,EAAE,IAAI,CAAC;MACV;IACF;EACF,CAAC;EAED,MAAM0C,oBAAoB,GAAIM,EAAE,IAAK;IACnC;IACA,MAAME,eAAe,GAAG,CAAC,GAAGnD,YAAY,EAAEiD,EAAE,CAAC;IAC7ChD,eAAe,CAACkD,eAAe,CAAC;IAEhC,IAAIA,eAAe,CAACD,MAAM,KAAK,CAAC,EAAE;MAChC,MAAM,CAACG,WAAW,EAAEC,YAAY,CAAC,GAAGH,eAAe;MACnD,MAAMI,SAAS,GAAGzD,KAAK,CAAC0D,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACR,EAAE,KAAKI,WAAW,CAAC;MAC7D,MAAMK,UAAU,GAAG5D,KAAK,CAAC0D,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACR,EAAE,KAAKK,YAAY,CAAC;MAE/D,IAAIC,SAAS,CAACI,KAAK,KAAKD,UAAU,CAACC,KAAK,EAAE;QACxCxD,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAEmD,WAAW,EAAEC,YAAY,CAAC,CAAC;QAC7DrD,eAAe,CAAC,EAAE,CAAC;MACrB,CAAC,MAAM;QACL6D,UAAU,CAAC,MAAM;UACf7D,eAAe,CAAC,EAAE,CAAC;QACrB,CAAC,EAAE,IAAI,CAAC;MACV;IACF;EACF,CAAC;EAED,MAAM8D,iBAAiB,GAAIC,CAAC,IAAK;IAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI,CAACjD,WAAW,CAACkD,IAAI,CAAC,CAAC,EAAE;IAEzB/E,kBAAkB,CAACgF,eAAe,CAACnD,WAAW,CAAC;IAC/CC,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,MAAMmD,QAAQ,GAAGA,CAAA,KAAM;IACrBjF,kBAAkB,CAAC4D,UAAU,CAAC,CAAC;IAC/BlD,QAAQ,CAAC,GAAG,CAAC;EACf,CAAC;EAED,IAAIW,OAAO,EAAE;IACX,oBAAOjB,OAAA;MAAK8E,SAAS,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACrD;EAEA,oBACEnF,OAAA;IAAK8E,SAAS,EAAC,4BAA4B;IAAAC,QAAA,gBACzC/E,OAAA;MAAK8E,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/B/E,OAAA;QAAA+E,QAAA,EAAI;MAA6B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtCnF,OAAA;QAAK8E,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB/E,OAAA;UAAA+E,QAAA,EAAK5D,KAAK,GAAGA,KAAK,CAACiE,IAAI,GAAG;QAAM;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACtCnF,OAAA;UAAA+E,QAAA,GAAG,QAAM,EAAC5E,MAAM;QAAA;UAAA6E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrBnF,OAAA;UAAA+E,QAAA,GAAG,eAAa,EAAC1E,UAAU;QAAA;UAAA2E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eAENnF,OAAA,CAACL,UAAU;QAACkB,KAAK,EAAEA;MAAM;QAAAmE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAE5BnF,OAAA;QAAK8E,SAAS,EAAC,YAAY;QAAAC,QAAA,EACxBxE,KAAK,CAAC8E,GAAG,CAACnB,IAAI,iBACblE,OAAA,CAACN,IAAI;UAEHgE,EAAE,EAAEQ,IAAI,CAACR,EAAG;UACZU,KAAK,EAAEF,IAAI,CAACE,KAAM;UAClBkB,SAAS,EAAE7E,YAAY,CAACwC,QAAQ,CAACiB,IAAI,CAACR,EAAE,CAAC,IAAI/C,YAAY,CAACsC,QAAQ,CAACiB,IAAI,CAACR,EAAE,CAAE;UAC5E6B,SAAS,EAAE5E,YAAY,CAACsC,QAAQ,CAACiB,IAAI,CAACR,EAAE,CAAE;UAC1C8B,OAAO,EAAEA,CAAA,KAAM/B,eAAe,CAACS,IAAI,CAACR,EAAE;QAAE,GALnCQ,IAAI,CAACR,EAAE;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMb,CACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,EAELpE,QAAQ,iBACPf,OAAA;QAAK8E,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB/E,OAAA;UAAA+E,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClBnF,OAAA;UAAA+E,QAAA,GAAG,8BAAyB,EAAClE,KAAK,EAAC,cAAY;QAAA;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eACnDnF,OAAA;UAAQwF,OAAO,EAAEX,QAAS;UAAAE,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,eAENnF,OAAA;MAAK8E,SAAS,EAAC,qBAAqB;MAAAC,QAAA,gBAClC/E,OAAA;QAAK8E,SAAS,EAAC,cAAc;QAAAC,QAAA,gBAC3B/E,OAAA;UAAA+E,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClBnF,OAAA;UAAA+E,QAAA,gBACE/E,OAAA;YAAI8E,SAAS,EAAC,gBAAgB;YAAAC,QAAA,GAAElD,QAAQ,EAAC,YAAO;UAAA;YAAAmD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,EACpD9D,OAAO,CAAC6B,MAAM,CAACC,MAAM,IAAIA,MAAM,KAAKtB,QAAQ,CAAC,CAACwD,GAAG,CAAClC,MAAM,iBACvDnD,OAAA;YAAA+E,QAAA,EAAkB5B;UAAM,GAAfA,MAAM;YAAA6B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAc,CAC9B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAENnF,OAAA;QAAK8E,SAAS,EAAC,UAAU;QAAAC,QAAA,gBACvB/E,OAAA;UAAA+E,QAAA,EAAI;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACbnF,OAAA;UAAK8E,SAAS,EAAC,UAAU;UAAAC,QAAA,EACtBxD,QAAQ,CAAC8D,GAAG,CAAC,CAACI,GAAG,EAAEC,KAAK,kBACvB1F,OAAA;YAEE8E,SAAS,EAAE,WAAWW,GAAG,CAAC3C,QAAQ,KAAKjB,QAAQ,GAAG,aAAa,GAAG,eAAe,EAAG;YAAAkD,QAAA,gBAEpF/E,OAAA;cAAM8E,SAAS,EAAC,QAAQ;cAAAC,QAAA,GAAEU,GAAG,CAAC3C,QAAQ,EAAC,GAAC;YAAA;cAAAkC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC/CnF,OAAA;cAAM8E,SAAS,EAAC,SAAS;cAAAC,QAAA,EAAEU,GAAG,CAACpC,OAAO,CAACsC;YAAI;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA,GAJ9CO,KAAK;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKP,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eAENnF,OAAA;UAAM4F,QAAQ,EAAEpB,iBAAkB;UAACM,SAAS,EAAC,WAAW;UAAAC,QAAA,gBACtD/E,OAAA;YACE6C,IAAI,EAAC,MAAM;YACXuB,KAAK,EAAE3C,WAAY;YACnBoE,QAAQ,EAAGpB,CAAC,IAAK/C,cAAc,CAAC+C,CAAC,CAACqB,MAAM,CAAC1B,KAAK,CAAE;YAChD2B,WAAW,EAAC;UAAwB;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrC,CAAC,eACFnF,OAAA;YAAQ6C,IAAI,EAAC,QAAQ;YAAAkC,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eAENnF,OAAA;QAAQwF,OAAO,EAAEX,QAAS;QAACC,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjF,EAAA,CAlQID,eAAe;EAAA,QACqBV,SAAS,EAChCC,WAAW;AAAA;AAAAwG,EAAA,GAFxB/F,eAAe;AAoQrB,eAAeA,eAAe;AAAC,IAAA+F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
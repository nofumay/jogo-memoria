{"ast":null,"code":"import ThemeService from './ThemeService';\n\n// Versão simulada do GameService para desenvolvimento\nclass GameService {\n  constructor() {\n    this.initLocalStorage();\n  }\n\n  // Retorna cartas para o jogo (com o tema padrão \"Emoji\")\n  async getCards() {\n    try {\n      // Usar o tema de emojis por padrão quando iniciado diretamente\n      const defaultThemeId = 1; // ID do tema Emoji\n      const defaultDifficulty = 'medium';\n      const cards = await ThemeService.getCardsForTheme(defaultThemeId, defaultDifficulty);\n      return cards;\n    } catch (error) {\n      console.error('Erro ao buscar cartas:', error);\n      throw error;\n    }\n  }\n\n  // Salva a pontuação no localStorage\n  async saveScore(moves) {\n    try {\n      const scores = this.getScoresFromStorage();\n      const username = this.getCurrentUsername();\n      scores.push({\n        id: Date.now(),\n        username: username || 'Jogador Anônimo',\n        moves: moves,\n        date: new Date().toISOString()\n      });\n\n      // Ordenar pontuações (menor número de movimentos = melhor)\n      scores.sort((a, b) => a.moves - b.moves);\n\n      // Limitar a 10 melhores pontuações\n      const topScores = scores.slice(0, 10);\n      localStorage.setItem('memory_scores', JSON.stringify(topScores));\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Erro ao salvar pontuação:', error);\n      throw error;\n    }\n  }\n\n  // Retorna as pontuações mais altas\n  async getHighScores() {\n    try {\n      return this.getScoresFromStorage();\n    } catch (error) {\n      console.error('Erro ao buscar pontuações:', error);\n      throw error;\n    }\n  }\n\n  // Funções auxiliares\n  getCurrentUsername() {\n    try {\n      const userStr = localStorage.getItem('currentUser');\n      if (!userStr) return null;\n      const user = JSON.parse(userStr);\n      return user.username;\n    } catch (error) {\n      return null;\n    }\n  }\n  getScoresFromStorage() {\n    const scoresStr = localStorage.getItem('memory_scores');\n    return scoresStr ? JSON.parse(scoresStr) : [];\n  }\n\n  // Inicializar localStorage se necessário\n  initLocalStorage() {\n    if (!localStorage.getItem('memory_scores')) {\n      localStorage.setItem('memory_scores', JSON.stringify([]));\n    }\n  }\n}\nexport default new GameService();","map":{"version":3,"names":["ThemeService","GameService","constructor","initLocalStorage","getCards","defaultThemeId","defaultDifficulty","cards","getCardsForTheme","error","console","saveScore","moves","scores","getScoresFromStorage","username","getCurrentUsername","push","id","Date","now","date","toISOString","sort","a","b","topScores","slice","localStorage","setItem","JSON","stringify","success","getHighScores","userStr","getItem","user","parse","scoresStr"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/services/GameService.js"],"sourcesContent":["import ThemeService from './ThemeService';\r\n\r\n// Versão simulada do GameService para desenvolvimento\r\nclass GameService {\r\n  constructor() {\r\n    this.initLocalStorage();\r\n  }\r\n\r\n  // Retorna cartas para o jogo (com o tema padrão \"Emoji\")\r\n  async getCards() {\r\n    try {\r\n      // Usar o tema de emojis por padrão quando iniciado diretamente\r\n      const defaultThemeId = 1; // ID do tema Emoji\r\n      const defaultDifficulty = 'medium';\r\n      \r\n      const cards = await ThemeService.getCardsForTheme(defaultThemeId, defaultDifficulty);\r\n      return cards;\r\n    } catch (error) {\r\n      console.error('Erro ao buscar cartas:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Salva a pontuação no localStorage\r\n  async saveScore(moves) {\r\n    try {\r\n      const scores = this.getScoresFromStorage();\r\n      const username = this.getCurrentUsername();\r\n      \r\n      scores.push({\r\n        id: Date.now(),\r\n        username: username || 'Jogador Anônimo',\r\n        moves: moves,\r\n        date: new Date().toISOString()\r\n      });\r\n      \r\n      // Ordenar pontuações (menor número de movimentos = melhor)\r\n      scores.sort((a, b) => a.moves - b.moves);\r\n      \r\n      // Limitar a 10 melhores pontuações\r\n      const topScores = scores.slice(0, 10);\r\n      \r\n      localStorage.setItem('memory_scores', JSON.stringify(topScores));\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Erro ao salvar pontuação:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Retorna as pontuações mais altas\r\n  async getHighScores() {\r\n    try {\r\n      return this.getScoresFromStorage();\r\n    } catch (error) {\r\n      console.error('Erro ao buscar pontuações:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Funções auxiliares\r\n  getCurrentUsername() {\r\n    try {\r\n      const userStr = localStorage.getItem('currentUser');\r\n      if (!userStr) return null;\r\n      \r\n      const user = JSON.parse(userStr);\r\n      return user.username;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  getScoresFromStorage() {\r\n    const scoresStr = localStorage.getItem('memory_scores');\r\n    return scoresStr ? JSON.parse(scoresStr) : [];\r\n  }\r\n\r\n  // Inicializar localStorage se necessário\r\n  initLocalStorage() {\r\n    if (!localStorage.getItem('memory_scores')) {\r\n      localStorage.setItem('memory_scores', JSON.stringify([]));\r\n    }\r\n  }\r\n}\r\n\r\nexport default new GameService(); "],"mappings":"AAAA,OAAOA,YAAY,MAAM,gBAAgB;;AAEzC;AACA,MAAMC,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,gBAAgB,CAAC,CAAC;EACzB;;EAEA;EACA,MAAMC,QAAQA,CAAA,EAAG;IACf,IAAI;MACF;MACA,MAAMC,cAAc,GAAG,CAAC,CAAC,CAAC;MAC1B,MAAMC,iBAAiB,GAAG,QAAQ;MAElC,MAAMC,KAAK,GAAG,MAAMP,YAAY,CAACQ,gBAAgB,CAACH,cAAc,EAAEC,iBAAiB,CAAC;MACpF,OAAOC,KAAK;IACd,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAME,SAASA,CAACC,KAAK,EAAE;IACrB,IAAI;MACF,MAAMC,MAAM,GAAG,IAAI,CAACC,oBAAoB,CAAC,CAAC;MAC1C,MAAMC,QAAQ,GAAG,IAAI,CAACC,kBAAkB,CAAC,CAAC;MAE1CH,MAAM,CAACI,IAAI,CAAC;QACVC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACdL,QAAQ,EAAEA,QAAQ,IAAI,iBAAiB;QACvCH,KAAK,EAAEA,KAAK;QACZS,IAAI,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;MAC/B,CAAC,CAAC;;MAEF;MACAT,MAAM,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACZ,KAAK,GAAGa,CAAC,CAACb,KAAK,CAAC;;MAExC;MACA,MAAMc,SAAS,GAAGb,MAAM,CAACc,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;MAErCC,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEC,IAAI,CAACC,SAAS,CAACL,SAAS,CAAC,CAAC;MAChE,OAAO;QAAEM,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOvB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAMwB,aAAaA,CAAA,EAAG;IACpB,IAAI;MACF,OAAO,IAAI,CAACnB,oBAAoB,CAAC,CAAC;IACpC,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF;;EAEA;EACAO,kBAAkBA,CAAA,EAAG;IACnB,IAAI;MACF,MAAMkB,OAAO,GAAGN,YAAY,CAACO,OAAO,CAAC,aAAa,CAAC;MACnD,IAAI,CAACD,OAAO,EAAE,OAAO,IAAI;MAEzB,MAAME,IAAI,GAAGN,IAAI,CAACO,KAAK,CAACH,OAAO,CAAC;MAChC,OAAOE,IAAI,CAACrB,QAAQ;IACtB,CAAC,CAAC,OAAON,KAAK,EAAE;MACd,OAAO,IAAI;IACb;EACF;EAEAK,oBAAoBA,CAAA,EAAG;IACrB,MAAMwB,SAAS,GAAGV,YAAY,CAACO,OAAO,CAAC,eAAe,CAAC;IACvD,OAAOG,SAAS,GAAGR,IAAI,CAACO,KAAK,CAACC,SAAS,CAAC,GAAG,EAAE;EAC/C;;EAEA;EACAnC,gBAAgBA,CAAA,EAAG;IACjB,IAAI,CAACyB,YAAY,CAACO,OAAO,CAAC,eAAe,CAAC,EAAE;MAC1CP,YAAY,CAACC,OAAO,CAAC,eAAe,EAAEC,IAAI,CAACC,SAAS,CAAC,EAAE,CAAC,CAAC;IAC3D;EACF;AACF;AAEA,eAAe,IAAI9B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
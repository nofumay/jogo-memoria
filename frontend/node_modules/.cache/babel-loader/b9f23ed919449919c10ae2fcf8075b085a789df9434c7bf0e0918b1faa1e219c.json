{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport SockJS from 'sockjs-client';\nclass MultiplayerService {\n  constructor() {\n    this.client = null;\n    this.roomId = null;\n    this.playerId = null;\n    this.subscriptions = {};\n    this.isConnected = false;\n    this.connectionCallbacks = {\n      onConnect: null,\n      onDisconnect: null,\n      onMessage: null,\n      onError: null\n    };\n  }\n  connect(callbacks = {}) {\n    if (this.client) {\n      return;\n    }\n    this.connectionCallbacks = {\n      ...this.connectionCallbacks,\n      ...callbacks\n    };\n    this.client = new Client({\n      webSocketFactory: () => new SockJS('http://localhost:8080/memoria-game-websocket'),\n      onConnect: () => {\n        console.log('Conectado ao servidor WebSocket');\n        this.isConnected = true;\n        if (this.connectionCallbacks.onConnect) {\n          this.connectionCallbacks.onConnect();\n        }\n      },\n      onDisconnect: () => {\n        console.log('Desconectado do servidor WebSocket');\n        this.isConnected = false;\n        if (this.connectionCallbacks.onDisconnect) {\n          this.connectionCallbacks.onDisconnect();\n        }\n      },\n      onStompError: frame => {\n        console.error('Erro no STOMP:', frame);\n        if (this.connectionCallbacks.onError) {\n          this.connectionCallbacks.onError(frame);\n        }\n      }\n    });\n    this.client.activate();\n  }\n  disconnect() {\n    if (this.client && this.isConnected) {\n      // Desinscrever-se de todos os tópicos\n      Object.values(this.subscriptions).forEach(subscription => {\n        if (subscription) {\n          subscription.unsubscribe();\n        }\n      });\n      this.subscriptions = {};\n\n      // Enviar mensagem de saída se estiver em uma sala\n      if (this.roomId && this.playerId) {\n        this.sendMessage('leave', {});\n      }\n\n      // Desconectar\n      this.client.deactivate();\n      this.client = null;\n      this.roomId = null;\n      this.playerId = null;\n      this.isConnected = false;\n    }\n  }\n  joinRoom(roomId, playerId) {\n    if (!this.client || !this.isConnected) {\n      console.error('Cliente não está conectado');\n      return false;\n    }\n    this.roomId = roomId;\n    this.playerId = playerId;\n\n    // Inscrever-se no tópico da sala\n    this.subscriptions.room = this.client.subscribe(`/topic/game/${roomId}`, message => {\n      const receivedMessage = JSON.parse(message.body);\n      console.log('Mensagem recebida:', receivedMessage);\n      if (this.connectionCallbacks.onMessage) {\n        this.connectionCallbacks.onMessage(receivedMessage);\n      }\n    });\n\n    // Enviar mensagem de entrada\n    this.sendMessage('join', {});\n    return true;\n  }\n  leaveRoom() {\n    if (this.roomId && this.playerId) {\n      this.sendMessage('leave', {});\n      if (this.subscriptions.room) {\n        this.subscriptions.room.unsubscribe();\n        this.subscriptions.room = null;\n      }\n      this.roomId = null;\n    }\n  }\n  sendMessage(type, content) {\n    if (!this.client || !this.isConnected || !this.roomId || !this.playerId) {\n      console.error('Não é possível enviar mensagem. Verifique a conexão e a sala.');\n      return false;\n    }\n    this.client.publish({\n      destination: `/app/game/${this.roomId}/${type}`,\n      body: JSON.stringify({\n        type: type,\n        senderId: this.playerId,\n        roomId: this.roomId,\n        content: content\n      })\n    });\n    return true;\n  }\n  sendMove(cardId) {\n    return this.sendMessage('move', {\n      cardId\n    });\n  }\n  sendChatMessage(text) {\n    return this.sendMessage('chat', {\n      text\n    });\n  }\n}\nexport default new MultiplayerService();","map":{"version":3,"names":["Client","SockJS","MultiplayerService","constructor","client","roomId","playerId","subscriptions","isConnected","connectionCallbacks","onConnect","onDisconnect","onMessage","onError","connect","callbacks","webSocketFactory","console","log","onStompError","frame","error","activate","disconnect","Object","values","forEach","subscription","unsubscribe","sendMessage","deactivate","joinRoom","room","subscribe","message","receivedMessage","JSON","parse","body","leaveRoom","type","content","publish","destination","stringify","senderId","sendMove","cardId","sendChatMessage","text"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/services/MultiplayerService.js"],"sourcesContent":["import { Client } from '@stomp/stompjs';\r\nimport SockJS from 'sockjs-client';\r\n\r\nclass MultiplayerService {\r\n  constructor() {\r\n    this.client = null;\r\n    this.roomId = null;\r\n    this.playerId = null;\r\n    this.subscriptions = {};\r\n    this.isConnected = false;\r\n    this.connectionCallbacks = {\r\n      onConnect: null,\r\n      onDisconnect: null,\r\n      onMessage: null,\r\n      onError: null\r\n    };\r\n  }\r\n\r\n  connect(callbacks = {}) {\r\n    if (this.client) {\r\n      return;\r\n    }\r\n\r\n    this.connectionCallbacks = {\r\n      ...this.connectionCallbacks,\r\n      ...callbacks\r\n    };\r\n\r\n    this.client = new Client({\r\n      webSocketFactory: () => new SockJS('http://localhost:8080/memoria-game-websocket'),\r\n      onConnect: () => {\r\n        console.log('Conectado ao servidor WebSocket');\r\n        this.isConnected = true;\r\n        if (this.connectionCallbacks.onConnect) {\r\n          this.connectionCallbacks.onConnect();\r\n        }\r\n      },\r\n      onDisconnect: () => {\r\n        console.log('Desconectado do servidor WebSocket');\r\n        this.isConnected = false;\r\n        if (this.connectionCallbacks.onDisconnect) {\r\n          this.connectionCallbacks.onDisconnect();\r\n        }\r\n      },\r\n      onStompError: (frame) => {\r\n        console.error('Erro no STOMP:', frame);\r\n        if (this.connectionCallbacks.onError) {\r\n          this.connectionCallbacks.onError(frame);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.client.activate();\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.client && this.isConnected) {\r\n      // Desinscrever-se de todos os tópicos\r\n      Object.values(this.subscriptions).forEach(subscription => {\r\n        if (subscription) {\r\n          subscription.unsubscribe();\r\n        }\r\n      });\r\n      this.subscriptions = {};\r\n\r\n      // Enviar mensagem de saída se estiver em uma sala\r\n      if (this.roomId && this.playerId) {\r\n        this.sendMessage('leave', {});\r\n      }\r\n\r\n      // Desconectar\r\n      this.client.deactivate();\r\n      this.client = null;\r\n      this.roomId = null;\r\n      this.playerId = null;\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n\r\n  joinRoom(roomId, playerId) {\r\n    if (!this.client || !this.isConnected) {\r\n      console.error('Cliente não está conectado');\r\n      return false;\r\n    }\r\n\r\n    this.roomId = roomId;\r\n    this.playerId = playerId;\r\n\r\n    // Inscrever-se no tópico da sala\r\n    this.subscriptions.room = this.client.subscribe(`/topic/game/${roomId}`, (message) => {\r\n      const receivedMessage = JSON.parse(message.body);\r\n      console.log('Mensagem recebida:', receivedMessage);\r\n      \r\n      if (this.connectionCallbacks.onMessage) {\r\n        this.connectionCallbacks.onMessage(receivedMessage);\r\n      }\r\n    });\r\n\r\n    // Enviar mensagem de entrada\r\n    this.sendMessage('join', {});\r\n    return true;\r\n  }\r\n\r\n  leaveRoom() {\r\n    if (this.roomId && this.playerId) {\r\n      this.sendMessage('leave', {});\r\n      \r\n      if (this.subscriptions.room) {\r\n        this.subscriptions.room.unsubscribe();\r\n        this.subscriptions.room = null;\r\n      }\r\n      \r\n      this.roomId = null;\r\n    }\r\n  }\r\n\r\n  sendMessage(type, content) {\r\n    if (!this.client || !this.isConnected || !this.roomId || !this.playerId) {\r\n      console.error('Não é possível enviar mensagem. Verifique a conexão e a sala.');\r\n      return false;\r\n    }\r\n\r\n    this.client.publish({\r\n      destination: `/app/game/${this.roomId}/${type}`,\r\n      body: JSON.stringify({\r\n        type: type,\r\n        senderId: this.playerId,\r\n        roomId: this.roomId,\r\n        content: content\r\n      })\r\n    });\r\n    \r\n    return true;\r\n  }\r\n\r\n  sendMove(cardId) {\r\n    return this.sendMessage('move', { cardId });\r\n  }\r\n\r\n  sendChatMessage(text) {\r\n    return this.sendMessage('chat', { text });\r\n  }\r\n}\r\n\r\nexport default new MultiplayerService(); "],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,eAAe;AAElC,MAAMC,kBAAkB,CAAC;EACvBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,mBAAmB,GAAG;MACzBC,SAAS,EAAE,IAAI;MACfC,YAAY,EAAE,IAAI;MAClBC,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE;IACX,CAAC;EACH;EAEAC,OAAOA,CAACC,SAAS,GAAG,CAAC,CAAC,EAAE;IACtB,IAAI,IAAI,CAACX,MAAM,EAAE;MACf;IACF;IAEA,IAAI,CAACK,mBAAmB,GAAG;MACzB,GAAG,IAAI,CAACA,mBAAmB;MAC3B,GAAGM;IACL,CAAC;IAED,IAAI,CAACX,MAAM,GAAG,IAAIJ,MAAM,CAAC;MACvBgB,gBAAgB,EAAEA,CAAA,KAAM,IAAIf,MAAM,CAAC,8CAA8C,CAAC;MAClFS,SAAS,EAAEA,CAAA,KAAM;QACfO,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;QAC9C,IAAI,CAACV,WAAW,GAAG,IAAI;QACvB,IAAI,IAAI,CAACC,mBAAmB,CAACC,SAAS,EAAE;UACtC,IAAI,CAACD,mBAAmB,CAACC,SAAS,CAAC,CAAC;QACtC;MACF,CAAC;MACDC,YAAY,EAAEA,CAAA,KAAM;QAClBM,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;QACjD,IAAI,CAACV,WAAW,GAAG,KAAK;QACxB,IAAI,IAAI,CAACC,mBAAmB,CAACE,YAAY,EAAE;UACzC,IAAI,CAACF,mBAAmB,CAACE,YAAY,CAAC,CAAC;QACzC;MACF,CAAC;MACDQ,YAAY,EAAGC,KAAK,IAAK;QACvBH,OAAO,CAACI,KAAK,CAAC,gBAAgB,EAAED,KAAK,CAAC;QACtC,IAAI,IAAI,CAACX,mBAAmB,CAACI,OAAO,EAAE;UACpC,IAAI,CAACJ,mBAAmB,CAACI,OAAO,CAACO,KAAK,CAAC;QACzC;MACF;IACF,CAAC,CAAC;IAEF,IAAI,CAAChB,MAAM,CAACkB,QAAQ,CAAC,CAAC;EACxB;EAEAC,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAACnB,MAAM,IAAI,IAAI,CAACI,WAAW,EAAE;MACnC;MACAgB,MAAM,CAACC,MAAM,CAAC,IAAI,CAAClB,aAAa,CAAC,CAACmB,OAAO,CAACC,YAAY,IAAI;QACxD,IAAIA,YAAY,EAAE;UAChBA,YAAY,CAACC,WAAW,CAAC,CAAC;QAC5B;MACF,CAAC,CAAC;MACF,IAAI,CAACrB,aAAa,GAAG,CAAC,CAAC;;MAEvB;MACA,IAAI,IAAI,CAACF,MAAM,IAAI,IAAI,CAACC,QAAQ,EAAE;QAChC,IAAI,CAACuB,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;MAC/B;;MAEA;MACA,IAAI,CAACzB,MAAM,CAAC0B,UAAU,CAAC,CAAC;MACxB,IAAI,CAAC1B,MAAM,GAAG,IAAI;MAClB,IAAI,CAACC,MAAM,GAAG,IAAI;MAClB,IAAI,CAACC,QAAQ,GAAG,IAAI;MACpB,IAAI,CAACE,WAAW,GAAG,KAAK;IAC1B;EACF;EAEAuB,QAAQA,CAAC1B,MAAM,EAAEC,QAAQ,EAAE;IACzB,IAAI,CAAC,IAAI,CAACF,MAAM,IAAI,CAAC,IAAI,CAACI,WAAW,EAAE;MACrCS,OAAO,CAACI,KAAK,CAAC,4BAA4B,CAAC;MAC3C,OAAO,KAAK;IACd;IAEA,IAAI,CAAChB,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;;IAExB;IACA,IAAI,CAACC,aAAa,CAACyB,IAAI,GAAG,IAAI,CAAC5B,MAAM,CAAC6B,SAAS,CAAC,eAAe5B,MAAM,EAAE,EAAG6B,OAAO,IAAK;MACpF,MAAMC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;MAChDrB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEiB,eAAe,CAAC;MAElD,IAAI,IAAI,CAAC1B,mBAAmB,CAACG,SAAS,EAAE;QACtC,IAAI,CAACH,mBAAmB,CAACG,SAAS,CAACuB,eAAe,CAAC;MACrD;IACF,CAAC,CAAC;;IAEF;IACA,IAAI,CAACN,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;IAC5B,OAAO,IAAI;EACb;EAEAU,SAASA,CAAA,EAAG;IACV,IAAI,IAAI,CAAClC,MAAM,IAAI,IAAI,CAACC,QAAQ,EAAE;MAChC,IAAI,CAACuB,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;MAE7B,IAAI,IAAI,CAACtB,aAAa,CAACyB,IAAI,EAAE;QAC3B,IAAI,CAACzB,aAAa,CAACyB,IAAI,CAACJ,WAAW,CAAC,CAAC;QACrC,IAAI,CAACrB,aAAa,CAACyB,IAAI,GAAG,IAAI;MAChC;MAEA,IAAI,CAAC3B,MAAM,GAAG,IAAI;IACpB;EACF;EAEAwB,WAAWA,CAACW,IAAI,EAAEC,OAAO,EAAE;IACzB,IAAI,CAAC,IAAI,CAACrC,MAAM,IAAI,CAAC,IAAI,CAACI,WAAW,IAAI,CAAC,IAAI,CAACH,MAAM,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE;MACvEW,OAAO,CAACI,KAAK,CAAC,+DAA+D,CAAC;MAC9E,OAAO,KAAK;IACd;IAEA,IAAI,CAACjB,MAAM,CAACsC,OAAO,CAAC;MAClBC,WAAW,EAAE,aAAa,IAAI,CAACtC,MAAM,IAAImC,IAAI,EAAE;MAC/CF,IAAI,EAAEF,IAAI,CAACQ,SAAS,CAAC;QACnBJ,IAAI,EAAEA,IAAI;QACVK,QAAQ,EAAE,IAAI,CAACvC,QAAQ;QACvBD,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBoC,OAAO,EAAEA;MACX,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,IAAI;EACb;EAEAK,QAAQA,CAACC,MAAM,EAAE;IACf,OAAO,IAAI,CAAClB,WAAW,CAAC,MAAM,EAAE;MAAEkB;IAAO,CAAC,CAAC;EAC7C;EAEAC,eAAeA,CAACC,IAAI,EAAE;IACpB,OAAO,IAAI,CAACpB,WAAW,CAAC,MAAM,EAAE;MAAEoB;IAAK,CAAC,CAAC;EAC3C;AACF;AAEA,eAAe,IAAI/C,kBAAkB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
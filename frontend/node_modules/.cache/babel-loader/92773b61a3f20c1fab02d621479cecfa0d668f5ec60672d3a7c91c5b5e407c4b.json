{"ast":null,"code":"// Serviço de temas para o jogo da memória\n// Usando simulação em localStorage para desenvolvimento\nclass ThemeService{constructor(){this.initializeDefaultThemes();}// Obter todos os temas\ngetAllThemes(){return new Promise(resolve=>{const themes=this.getThemesFromStorage();resolve(themes);});}// Obter um tema específico pelo ID\ngetThemeById(themeId){return new Promise((resolve,reject)=>{const themes=this.getThemesFromStorage();const theme=themes.find(t=>t.id===parseInt(themeId)||t.id===themeId);if(theme){resolve(theme);}else{reject(new Error(`Tema com ID ${themeId} não encontrado`));}});}// Obter cartas para um tema e dificuldade específicos\ngetCardsForTheme(themeId,difficulty){return new Promise((resolve,reject)=>{try{const theme=this.getThemesFromStorage().find(t=>t.id===parseInt(themeId)||t.id===themeId);if(!theme){return reject(new Error(`Tema com ID ${themeId} não encontrado`));}// Determinar número de pares com base na dificuldade\nlet pairsCount;switch(difficulty){case'easy':pairsCount=4;// 8 cartas\nbreak;case'medium':pairsCount=8;// 16 cartas\nbreak;case'hard':pairsCount=12;// 24 cartas\nbreak;default:pairsCount=8;}// Garantir que temos símbolos suficientes\nif(theme.symbols.length<pairsCount){return reject(new Error(`Tema não tem símbolos suficientes para a dificuldade ${difficulty}`));}// Selecionar símbolos aleatoriamente para o jogo\nconst gameSymbols=this.getRandomElements(theme.symbols,pairsCount);// Criar pares de cartas (duplicando cada símbolo)\nlet cards=[];gameSymbols.forEach((symbol,index)=>{// Primeira carta do par\ncards.push({id:`card-${index}-a`,value:symbol,isFlipped:false,isMatched:false});// Segunda carta do par\ncards.push({id:`card-${index}-b`,value:symbol,isFlipped:false,isMatched:false});});// Embaralhar as cartas\ncards=this.shuffleArray(cards);resolve(cards);}catch(error){reject(error);}});}// Funções auxiliares\ngetThemesFromStorage(){const themesStr=localStorage.getItem('memory_themes');return themesStr?JSON.parse(themesStr):[];}getRandomElements(array,count){const shuffled=[...array].sort(()=>0.5-Math.random());return shuffled.slice(0,count);}shuffleArray(array){const newArray=[...array];for(let i=newArray.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[newArray[i],newArray[j]]=[newArray[j],newArray[i]];}return newArray;}// Inicializar temas padrão para desenvolvimento\ninitializeDefaultThemes(){if(!localStorage.getItem('memory_themes')){const defaultThemes=[{id:1,name:'Emoji',description:'Tema com emojis divertidos',symbols:['😀','😎','🥳','🚀','🎮','🍕','🐱','🐶','🌈','🌟','🎵','🎁','🏆','🍦']},{id:2,name:'Animais',description:'Tema com animais',symbols:['🐶','🐱','🐭','🐹','🐰','🦊','🐻','🐼','🐨','🦁','🐯','🐸','🐵','🦄']},{id:3,name:'Comidas',description:'Tema com comidas',symbols:['🍎','🍌','🍓','🍕','🍔','🍦','🍩','🍪','🍫','🍿','🥗','🍣','🧁','🥞']}];localStorage.setItem('memory_themes',JSON.stringify(defaultThemes));}}}export default new ThemeService();","map":{"version":3,"names":["ThemeService","constructor","initializeDefaultThemes","getAllThemes","Promise","resolve","themes","getThemesFromStorage","getThemeById","themeId","reject","theme","find","t","id","parseInt","Error","getCardsForTheme","difficulty","pairsCount","symbols","length","gameSymbols","getRandomElements","cards","forEach","symbol","index","push","value","isFlipped","isMatched","shuffleArray","error","themesStr","localStorage","getItem","JSON","parse","array","count","shuffled","sort","Math","random","slice","newArray","i","j","floor","defaultThemes","name","description","setItem","stringify"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/services/ThemeService.js"],"sourcesContent":["// Serviço de temas para o jogo da memória\r\n// Usando simulação em localStorage para desenvolvimento\r\n\r\nclass ThemeService {\r\n  constructor() {\r\n    this.initializeDefaultThemes();\r\n  }\r\n\r\n  // Obter todos os temas\r\n  getAllThemes() {\r\n    return new Promise((resolve) => {\r\n      const themes = this.getThemesFromStorage();\r\n      resolve(themes);\r\n    });\r\n  }\r\n\r\n  // Obter um tema específico pelo ID\r\n  getThemeById(themeId) {\r\n    return new Promise((resolve, reject) => {\r\n      const themes = this.getThemesFromStorage();\r\n      const theme = themes.find(t => t.id === parseInt(themeId) || t.id === themeId);\r\n      \r\n      if (theme) {\r\n        resolve(theme);\r\n      } else {\r\n        reject(new Error(`Tema com ID ${themeId} não encontrado`));\r\n      }\r\n    });\r\n  }\r\n\r\n  // Obter cartas para um tema e dificuldade específicos\r\n  getCardsForTheme(themeId, difficulty) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const theme = this.getThemesFromStorage().find(t => \r\n          t.id === parseInt(themeId) || t.id === themeId\r\n        );\r\n        \r\n        if (!theme) {\r\n          return reject(new Error(`Tema com ID ${themeId} não encontrado`));\r\n        }\r\n        \r\n        // Determinar número de pares com base na dificuldade\r\n        let pairsCount;\r\n        switch (difficulty) {\r\n          case 'easy':\r\n            pairsCount = 4; // 8 cartas\r\n            break;\r\n          case 'medium':\r\n            pairsCount = 8; // 16 cartas\r\n            break;\r\n          case 'hard':\r\n            pairsCount = 12; // 24 cartas\r\n            break;\r\n          default:\r\n            pairsCount = 8;\r\n        }\r\n        \r\n        // Garantir que temos símbolos suficientes\r\n        if (theme.symbols.length < pairsCount) {\r\n          return reject(new Error(`Tema não tem símbolos suficientes para a dificuldade ${difficulty}`));\r\n        }\r\n        \r\n        // Selecionar símbolos aleatoriamente para o jogo\r\n        const gameSymbols = this.getRandomElements(theme.symbols, pairsCount);\r\n        \r\n        // Criar pares de cartas (duplicando cada símbolo)\r\n        let cards = [];\r\n        gameSymbols.forEach((symbol, index) => {\r\n          // Primeira carta do par\r\n          cards.push({\r\n            id: `card-${index}-a`,\r\n            value: symbol,\r\n            isFlipped: false,\r\n            isMatched: false\r\n          });\r\n          \r\n          // Segunda carta do par\r\n          cards.push({\r\n            id: `card-${index}-b`,\r\n            value: symbol,\r\n            isFlipped: false,\r\n            isMatched: false\r\n          });\r\n        });\r\n        \r\n        // Embaralhar as cartas\r\n        cards = this.shuffleArray(cards);\r\n        \r\n        resolve(cards);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Funções auxiliares\r\n  getThemesFromStorage() {\r\n    const themesStr = localStorage.getItem('memory_themes');\r\n    return themesStr ? JSON.parse(themesStr) : [];\r\n  }\r\n\r\n  getRandomElements(array, count) {\r\n    const shuffled = [...array].sort(() => 0.5 - Math.random());\r\n    return shuffled.slice(0, count);\r\n  }\r\n\r\n  shuffleArray(array) {\r\n    const newArray = [...array];\r\n    for (let i = newArray.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\r\n    }\r\n    return newArray;\r\n  }\r\n\r\n  // Inicializar temas padrão para desenvolvimento\r\n  initializeDefaultThemes() {\r\n    if (!localStorage.getItem('memory_themes')) {\r\n      const defaultThemes = [\r\n        {\r\n          id: 1,\r\n          name: 'Emoji',\r\n          description: 'Tema com emojis divertidos',\r\n          symbols: ['😀', '😎', '🥳', '🚀', '🎮', '🍕', '🐱', '🐶', '🌈', '🌟', '🎵', '🎁', '🏆', '🍦']\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Animais',\r\n          description: 'Tema com animais',\r\n          symbols: ['🐶', '🐱', '🐭', '🐹', '🐰', '🦊', '🐻', '🐼', '🐨', '🦁', '🐯', '🐸', '🐵', '🦄']\r\n        },\r\n        {\r\n          id: 3,\r\n          name: 'Comidas',\r\n          description: 'Tema com comidas',\r\n          symbols: ['🍎', '🍌', '🍓', '🍕', '🍔', '🍦', '🍩', '🍪', '🍫', '🍿', '🥗', '🍣', '🧁', '🥞']\r\n        }\r\n      ];\r\n      \r\n      localStorage.setItem('memory_themes', JSON.stringify(defaultThemes));\r\n    }\r\n  }\r\n}\r\n\r\nexport default new ThemeService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
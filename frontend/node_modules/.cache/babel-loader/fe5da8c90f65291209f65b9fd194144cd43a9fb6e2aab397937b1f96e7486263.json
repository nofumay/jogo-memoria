{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useParams,useNavigate}from'react-router-dom';import{toast}from'react-toastify';import Card from'../Card';import ScorePanel from'../ScorePanel';import MultiplayerService from'../../services/MultiplayerService';import AuthService from'../../services/AuthService';import ThemeService from'../../services/ThemeService';import'./MultiplayerGame.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MultiplayerGame=()=>{const{roomId,themeId,difficulty}=useParams();const navigate=useNavigate();const[cards,setCards]=useState([]);const[flippedCards,setFlippedCards]=useState([]);const[matchedPairs,setMatchedPairs]=useState([]);const[moves,setMoves]=useState(0);const[gameOver,setGameOver]=useState(false);const[loading,setLoading]=useState(true);const[theme,setTheme]=useState(null);const[players,setPlayers]=useState([]);const[messages,setMessages]=useState([]);const[chatMessage,setChatMessage]=useState('');// Obter usuário atual\nconst currentUser=AuthService.getCurrentUser();const username=currentUser?currentUser.username:'Anonymous';useEffect(()=>{if(!AuthService.isAuthenticated()){toast.error('Você precisa estar logado para jogar multiplayer');navigate('/login');return;}// Carregar cartas para o tema selecionado\nconst loadCards=async()=>{try{setLoading(true);const themeData=await ThemeService.getThemeById(themeId);setTheme(themeData);const cardData=await ThemeService.getCardsForTheme(themeId,difficulty);setCards(cardData);setLoading(false);}catch(error){console.error('Erro ao carregar cartas:',error);toast.error('Erro ao carregar o jogo');setLoading(false);}};loadCards();// Conectar ao WebSocket\nMultiplayerService.connect({onConnect:()=>{console.log('Conectado ao jogo multiplayer');MultiplayerService.joinRoom(roomId,username);},onDisconnect:()=>{console.log('Desconectado do jogo multiplayer');},onMessage:message=>{console.log('Mensagem recebida:',message);switch(message.type){case'join':if(message.senderId!==username){toast.info(`${message.senderId} entrou na sala`);setPlayers(prev=>{if(!prev.includes(message.senderId)){return[...prev,message.senderId];}return prev;});}break;case'leave':if(message.senderId!==username){toast.info(`${message.senderId} saiu da sala`);setPlayers(prev=>prev.filter(player=>player!==message.senderId));}break;case'move':if(message.senderId!==username){// Processar movimento de outro jogador\nhandleRemoteCardFlip(message.content.cardId);}break;case'chat':setMessages(prev=>[...prev,message]);break;default:break;}},onError:error=>{console.error('Erro na conexão WebSocket:',error);toast.error('Erro na conexão. Tente novamente.');}});return()=>{// Desconectar ao sair\nMultiplayerService.disconnect();};},[roomId,themeId,difficulty,username,navigate]);const handleCardClick=id=>{// Ignora cliques se o jogo estiver carregando, acabou, ou mais de duas cartas estiverem viradas\nif(loading||gameOver||flippedCards.length>=2||matchedPairs.includes(id)||flippedCards.includes(id)){return;}// Adiciona a carta à lista de cartas viradas\nconst newFlippedCards=[...flippedCards,id];setFlippedCards(newFlippedCards);// Envia o movimento para outros jogadores\nMultiplayerService.sendMove(id);// Se esta é a segunda carta virada\nif(newFlippedCards.length===2){setMoves(moves+1);const[firstCardId,secondCardId]=newFlippedCards;const firstCard=cards.find(card=>card.id===firstCardId);const secondCard=cards.find(card=>card.id===secondCardId);// Verifica se as cartas formam um par\nif(firstCard.value===secondCard.value){// Adiciona as cartas à lista de pares formados\nsetMatchedPairs([...matchedPairs,firstCardId,secondCardId]);setFlippedCards([]);// Verifica se todas as cartas foram encontradas\nif(matchedPairs.length+2===cards.length){setGameOver(true);MultiplayerService.sendMessage('gameOver',{winner:username,moves});}}else{// Se não formarem um par, vira as cartas de volta após um tempo\nsetTimeout(()=>{setFlippedCards([]);},1000);}}};const handleRemoteCardFlip=id=>{// Processa o movimento de um jogador remoto\nconst newFlippedCards=[...flippedCards,id];setFlippedCards(newFlippedCards);if(newFlippedCards.length===2){const[firstCardId,secondCardId]=newFlippedCards;const firstCard=cards.find(card=>card.id===firstCardId);const secondCard=cards.find(card=>card.id===secondCardId);if(firstCard.value===secondCard.value){setMatchedPairs([...matchedPairs,firstCardId,secondCardId]);setFlippedCards([]);}else{setTimeout(()=>{setFlippedCards([]);},1000);}}};const handleSendMessage=e=>{e.preventDefault();if(!chatMessage.trim())return;MultiplayerService.sendChatMessage(chatMessage);setChatMessage('');};const exitGame=()=>{MultiplayerService.disconnect();navigate('/');};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Carregando...\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"multiplayer-game-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"multiplayer-game\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Jogo da Mem\\xF3ria - Multiplayer\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"game-info\",children:[/*#__PURE__*/_jsx(\"h2\",{children:theme?theme.name:'Tema'}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Sala: \",roomId]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Dificuldade: \",difficulty]})]}),/*#__PURE__*/_jsx(ScorePanel,{moves:moves}),/*#__PURE__*/_jsx(\"div\",{className:\"game-board\",children:cards.map(card=>/*#__PURE__*/_jsx(Card,{id:card.id,value:card.value,isFlipped:flippedCards.includes(card.id)||matchedPairs.includes(card.id),isMatched:matchedPairs.includes(card.id),onClick:()=>handleCardClick(card.id)},card.id))}),gameOver&&/*#__PURE__*/_jsxs(\"div\",{className:\"game-over\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Parab\\xE9ns!\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Voc\\xEA completou o jogo em \",moves,\" movimentos!\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:exitGame,children:\"Sair do Jogo\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"multiplayer-sidebar\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"players-list\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Jogadores\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{className:\"current-player\",children:[username,\" (Voc\\xEA)\"]}),players.filter(player=>player!==username).map(player=>/*#__PURE__*/_jsx(\"li\",{children:player},player))]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-box\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Chat\"}),/*#__PURE__*/_jsx(\"div\",{className:\"messages\",children:messages.map((msg,index)=>/*#__PURE__*/_jsxs(\"div\",{className:`message ${msg.senderId===username?'own-message':'other-message'}`,children:[/*#__PURE__*/_jsxs(\"span\",{className:\"sender\",children:[msg.senderId,\":\"]}),/*#__PURE__*/_jsx(\"span\",{className:\"content\",children:msg.content.text})]},index))}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSendMessage,className:\"chat-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:chatMessage,onChange:e=>setChatMessage(e.target.value),placeholder:\"Digite uma mensagem...\"}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Enviar\"})]})]}),/*#__PURE__*/_jsx(\"button\",{onClick:exitGame,className:\"exit-button\",children:\"Sair do Jogo\"})]})]});};export default MultiplayerGame;","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","toast","Card","ScorePanel","MultiplayerService","AuthService","ThemeService","jsx","_jsx","jsxs","_jsxs","MultiplayerGame","roomId","themeId","difficulty","navigate","cards","setCards","flippedCards","setFlippedCards","matchedPairs","setMatchedPairs","moves","setMoves","gameOver","setGameOver","loading","setLoading","theme","setTheme","players","setPlayers","messages","setMessages","chatMessage","setChatMessage","currentUser","getCurrentUser","username","isAuthenticated","error","loadCards","themeData","getThemeById","cardData","getCardsForTheme","console","connect","onConnect","log","joinRoom","onDisconnect","onMessage","message","type","senderId","info","prev","includes","filter","player","handleRemoteCardFlip","content","cardId","onError","disconnect","handleCardClick","id","length","newFlippedCards","sendMove","firstCardId","secondCardId","firstCard","find","card","secondCard","value","sendMessage","winner","setTimeout","handleSendMessage","e","preventDefault","trim","sendChatMessage","exitGame","className","children","name","map","isFlipped","isMatched","onClick","msg","index","text","onSubmit","onChange","target","placeholder"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/components/Multiplayer/MultiplayerGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport Card from '../Card';\r\nimport ScorePanel from '../ScorePanel';\r\nimport MultiplayerService from '../../services/MultiplayerService';\r\nimport AuthService from '../../services/AuthService';\r\nimport ThemeService from '../../services/ThemeService';\r\nimport './MultiplayerGame.css';\r\n\r\nconst MultiplayerGame = () => {\r\n  const { roomId, themeId, difficulty } = useParams();\r\n  const navigate = useNavigate();\r\n  \r\n  const [cards, setCards] = useState([]);\r\n  const [flippedCards, setFlippedCards] = useState([]);\r\n  const [matchedPairs, setMatchedPairs] = useState([]);\r\n  const [moves, setMoves] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [theme, setTheme] = useState(null);\r\n  const [players, setPlayers] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [chatMessage, setChatMessage] = useState('');\r\n  \r\n  // Obter usuário atual\r\n  const currentUser = AuthService.getCurrentUser();\r\n  const username = currentUser ? currentUser.username : 'Anonymous';\r\n  \r\n  useEffect(() => {\r\n    if (!AuthService.isAuthenticated()) {\r\n      toast.error('Você precisa estar logado para jogar multiplayer');\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    \r\n    // Carregar cartas para o tema selecionado\r\n    const loadCards = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const themeData = await ThemeService.getThemeById(themeId);\r\n        setTheme(themeData);\r\n        \r\n        const cardData = await ThemeService.getCardsForTheme(themeId, difficulty);\r\n        setCards(cardData);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('Erro ao carregar cartas:', error);\r\n        toast.error('Erro ao carregar o jogo');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadCards();\r\n    \r\n    // Conectar ao WebSocket\r\n    MultiplayerService.connect({\r\n      onConnect: () => {\r\n        console.log('Conectado ao jogo multiplayer');\r\n        MultiplayerService.joinRoom(roomId, username);\r\n      },\r\n      onDisconnect: () => {\r\n        console.log('Desconectado do jogo multiplayer');\r\n      },\r\n      onMessage: (message) => {\r\n        console.log('Mensagem recebida:', message);\r\n        \r\n        switch (message.type) {\r\n          case 'join':\r\n            if (message.senderId !== username) {\r\n              toast.info(`${message.senderId} entrou na sala`);\r\n              setPlayers(prev => {\r\n                if (!prev.includes(message.senderId)) {\r\n                  return [...prev, message.senderId];\r\n                }\r\n                return prev;\r\n              });\r\n            }\r\n            break;\r\n            \r\n          case 'leave':\r\n            if (message.senderId !== username) {\r\n              toast.info(`${message.senderId} saiu da sala`);\r\n              setPlayers(prev => prev.filter(player => player !== message.senderId));\r\n            }\r\n            break;\r\n            \r\n          case 'move':\r\n            if (message.senderId !== username) {\r\n              // Processar movimento de outro jogador\r\n              handleRemoteCardFlip(message.content.cardId);\r\n            }\r\n            break;\r\n            \r\n          case 'chat':\r\n            setMessages(prev => [...prev, message]);\r\n            break;\r\n            \r\n          default:\r\n            break;\r\n        }\r\n      },\r\n      onError: (error) => {\r\n        console.error('Erro na conexão WebSocket:', error);\r\n        toast.error('Erro na conexão. Tente novamente.');\r\n      }\r\n    });\r\n    \r\n    return () => {\r\n      // Desconectar ao sair\r\n      MultiplayerService.disconnect();\r\n    };\r\n  }, [roomId, themeId, difficulty, username, navigate]);\r\n  \r\n  const handleCardClick = (id) => {\r\n    // Ignora cliques se o jogo estiver carregando, acabou, ou mais de duas cartas estiverem viradas\r\n    if (loading || gameOver || flippedCards.length >= 2 || matchedPairs.includes(id) || flippedCards.includes(id)) {\r\n      return;\r\n    }\r\n    \r\n    // Adiciona a carta à lista de cartas viradas\r\n    const newFlippedCards = [...flippedCards, id];\r\n    setFlippedCards(newFlippedCards);\r\n    \r\n    // Envia o movimento para outros jogadores\r\n    MultiplayerService.sendMove(id);\r\n    \r\n    // Se esta é a segunda carta virada\r\n    if (newFlippedCards.length === 2) {\r\n      setMoves(moves + 1);\r\n      \r\n      const [firstCardId, secondCardId] = newFlippedCards;\r\n      const firstCard = cards.find(card => card.id === firstCardId);\r\n      const secondCard = cards.find(card => card.id === secondCardId);\r\n      \r\n      // Verifica se as cartas formam um par\r\n      if (firstCard.value === secondCard.value) {\r\n        // Adiciona as cartas à lista de pares formados\r\n        setMatchedPairs([...matchedPairs, firstCardId, secondCardId]);\r\n        setFlippedCards([]);\r\n        \r\n        // Verifica se todas as cartas foram encontradas\r\n        if (matchedPairs.length + 2 === cards.length) {\r\n          setGameOver(true);\r\n          MultiplayerService.sendMessage('gameOver', { winner: username, moves });\r\n        }\r\n      } else {\r\n        // Se não formarem um par, vira as cartas de volta após um tempo\r\n        setTimeout(() => {\r\n          setFlippedCards([]);\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleRemoteCardFlip = (id) => {\r\n    // Processa o movimento de um jogador remoto\r\n    const newFlippedCards = [...flippedCards, id];\r\n    setFlippedCards(newFlippedCards);\r\n    \r\n    if (newFlippedCards.length === 2) {\r\n      const [firstCardId, secondCardId] = newFlippedCards;\r\n      const firstCard = cards.find(card => card.id === firstCardId);\r\n      const secondCard = cards.find(card => card.id === secondCardId);\r\n      \r\n      if (firstCard.value === secondCard.value) {\r\n        setMatchedPairs([...matchedPairs, firstCardId, secondCardId]);\r\n        setFlippedCards([]);\r\n      } else {\r\n        setTimeout(() => {\r\n          setFlippedCards([]);\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const handleSendMessage = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!chatMessage.trim()) return;\r\n    \r\n    MultiplayerService.sendChatMessage(chatMessage);\r\n    setChatMessage('');\r\n  };\r\n  \r\n  const exitGame = () => {\r\n    MultiplayerService.disconnect();\r\n    navigate('/');\r\n  };\r\n  \r\n  if (loading) {\r\n    return <div className=\"loading\">Carregando...</div>;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"multiplayer-game-container\">\r\n      <div className=\"multiplayer-game\">\r\n        <h1>Jogo da Memória - Multiplayer</h1>\r\n        <div className=\"game-info\">\r\n          <h2>{theme ? theme.name : 'Tema'}</h2>\r\n          <p>Sala: {roomId}</p>\r\n          <p>Dificuldade: {difficulty}</p>\r\n        </div>\r\n        \r\n        <ScorePanel moves={moves} />\r\n        \r\n        <div className=\"game-board\">\r\n          {cards.map(card => (\r\n            <Card \r\n              key={card.id} \r\n              id={card.id}\r\n              value={card.value}\r\n              isFlipped={flippedCards.includes(card.id) || matchedPairs.includes(card.id)}\r\n              isMatched={matchedPairs.includes(card.id)}\r\n              onClick={() => handleCardClick(card.id)}\r\n            />\r\n          ))}\r\n        </div>\r\n        \r\n        {gameOver && (\r\n          <div className=\"game-over\">\r\n            <h2>Parabéns!</h2>\r\n            <p>Você completou o jogo em {moves} movimentos!</p>\r\n            <button onClick={exitGame}>Sair do Jogo</button>\r\n          </div>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"multiplayer-sidebar\">\r\n        <div className=\"players-list\">\r\n          <h3>Jogadores</h3>\r\n          <ul>\r\n            <li className=\"current-player\">{username} (Você)</li>\r\n            {players.filter(player => player !== username).map(player => (\r\n              <li key={player}>{player}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        \r\n        <div className=\"chat-box\">\r\n          <h3>Chat</h3>\r\n          <div className=\"messages\">\r\n            {messages.map((msg, index) => (\r\n              <div \r\n                key={index} \r\n                className={`message ${msg.senderId === username ? 'own-message' : 'other-message'}`}\r\n              >\r\n                <span className=\"sender\">{msg.senderId}:</span>\r\n                <span className=\"content\">{msg.content.text}</span>\r\n              </div>\r\n            ))}\r\n          </div>\r\n          \r\n          <form onSubmit={handleSendMessage} className=\"chat-form\">\r\n            <input \r\n              type=\"text\" \r\n              value={chatMessage} \r\n              onChange={(e) => setChatMessage(e.target.value)}\r\n              placeholder=\"Digite uma mensagem...\"\r\n            />\r\n            <button type=\"submit\">Enviar</button>\r\n          </form>\r\n        </div>\r\n        \r\n        <button onClick={exitGame} className=\"exit-button\">Sair do Jogo</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultiplayerGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
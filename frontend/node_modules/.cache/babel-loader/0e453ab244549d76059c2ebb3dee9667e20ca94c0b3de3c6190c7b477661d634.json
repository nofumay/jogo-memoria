{"ast":null,"code":"import axios from'axios';import jwtDecode from'jwt-decode';const API_URL=process.env.REACT_APP_API_URL||'http://localhost:3001/api';// Para desenvolvimento, vamos implementar uma versão simples com localStorage\nclass AuthService{register(username,password,email){// Em ambiente de produção, isso seria uma chamada à API\nreturn new Promise((resolve,reject)=>{try{// Verificar se o usuário já existe\nconst users=this.getAllUsers();if(users.some(user=>user.username===username)){return reject({response:{data:{message:'Nome de usuário já existe'}}});}if(users.some(user=>user.email===email)){return reject({response:{data:{message:'Email já cadastrado'}}});}// Criar novo usuário\nconst newUser={id:Date.now(),username,email,password,// Em produção, a senha seria encriptada\ncreatedAt:new Date().toISOString()};// Salvar no storage\nusers.push(newUser);localStorage.setItem('users',JSON.stringify(users));resolve({user:{...newUser,password:undefined}});}catch(error){reject(error);}});}login(username,password){// Em ambiente de produção, isso seria uma chamada à API\nreturn new Promise((resolve,reject)=>{try{const users=this.getAllUsers();const user=users.find(u=>u.username===username&&u.password===password);if(!user){return reject({response:{data:{message:'Usuário ou senha inválidos'}}});}// Criar objeto usuário sem a senha\nconst userObj={...user,password:undefined};// Simular JWT\nconst token=`mock-jwt-token-${Date.now()}`;// Salvar no storage\nlocalStorage.setItem('currentUser',JSON.stringify(userObj));localStorage.setItem('token',token);resolve({user:userObj,token});}catch(error){reject(error);}});}logout(){localStorage.removeItem('currentUser');localStorage.removeItem('token');}getCurrentUser(){const userStr=localStorage.getItem('currentUser');if(!userStr)return null;return JSON.parse(userStr);}isAuthenticated(){return!!localStorage.getItem('token');}getAllUsers(){const usersStr=localStorage.getItem('users');return usersStr?JSON.parse(usersStr):[];}// Para testes e desenvolvimento\ninitializeDefaultUsers(){if(!localStorage.getItem('users')){const defaultUsers=[{id:1,username:'jogador1',email:'jogador1@example.com',password:'senha123',createdAt:new Date().toISOString()}];localStorage.setItem('users',JSON.stringify(defaultUsers));}}}// Inicializar usuários padrão\nconst authService=new AuthService();authService.initializeDefaultUsers();export default authService;","map":{"version":3,"names":["axios","jwtDecode","API_URL","process","env","REACT_APP_API_URL","AuthService","register","username","password","email","Promise","resolve","reject","users","getAllUsers","some","user","response","data","message","newUser","id","Date","now","createdAt","toISOString","push","localStorage","setItem","JSON","stringify","undefined","error","login","find","u","userObj","token","logout","removeItem","getCurrentUser","userStr","getItem","parse","isAuthenticated","usersStr","initializeDefaultUsers","defaultUsers","authService"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\n// Para desenvolvimento, vamos implementar uma versão simples com localStorage\r\nclass AuthService {\r\n  register(username, password, email) {\r\n    // Em ambiente de produção, isso seria uma chamada à API\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        // Verificar se o usuário já existe\r\n        const users = this.getAllUsers();\r\n        if (users.some(user => user.username === username)) {\r\n          return reject({ response: { data: { message: 'Nome de usuário já existe' } } });\r\n        }\r\n        \r\n        if (users.some(user => user.email === email)) {\r\n          return reject({ response: { data: { message: 'Email já cadastrado' } } });\r\n        }\r\n\r\n        // Criar novo usuário\r\n        const newUser = {\r\n          id: Date.now(),\r\n          username,\r\n          email,\r\n          password, // Em produção, a senha seria encriptada\r\n          createdAt: new Date().toISOString()\r\n        };\r\n\r\n        // Salvar no storage\r\n        users.push(newUser);\r\n        localStorage.setItem('users', JSON.stringify(users));\r\n\r\n        resolve({ user: { ...newUser, password: undefined } });\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  login(username, password) {\r\n    // Em ambiente de produção, isso seria uma chamada à API\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const users = this.getAllUsers();\r\n        const user = users.find(\r\n          u => u.username === username && u.password === password\r\n        );\r\n\r\n        if (!user) {\r\n          return reject({ response: { data: { message: 'Usuário ou senha inválidos' } } });\r\n        }\r\n\r\n        // Criar objeto usuário sem a senha\r\n        const userObj = { ...user, password: undefined };\r\n        \r\n        // Simular JWT\r\n        const token = `mock-jwt-token-${Date.now()}`;\r\n        \r\n        // Salvar no storage\r\n        localStorage.setItem('currentUser', JSON.stringify(userObj));\r\n        localStorage.setItem('token', token);\r\n\r\n        resolve({ user: userObj, token });\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('currentUser');\r\n    localStorage.removeItem('token');\r\n  }\r\n\r\n  getCurrentUser() {\r\n    const userStr = localStorage.getItem('currentUser');\r\n    if (!userStr) return null;\r\n    return JSON.parse(userStr);\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n\r\n  getAllUsers() {\r\n    const usersStr = localStorage.getItem('users');\r\n    return usersStr ? JSON.parse(usersStr) : [];\r\n  }\r\n\r\n  // Para testes e desenvolvimento\r\n  initializeDefaultUsers() {\r\n    if (!localStorage.getItem('users')) {\r\n      const defaultUsers = [\r\n        {\r\n          id: 1,\r\n          username: 'jogador1',\r\n          email: 'jogador1@example.com',\r\n          password: 'senha123',\r\n          createdAt: new Date().toISOString()\r\n        }\r\n      ];\r\n      localStorage.setItem('users', JSON.stringify(defaultUsers));\r\n    }\r\n  }\r\n}\r\n\r\n// Inicializar usuários padrão\r\nconst authService = new AuthService();\r\nauthService.initializeDefaultUsers();\r\n\r\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// Simulação de serviço multiplayer usando localStorage para desenvolvimento\nclass MultiplayerService{constructor(){this.callbacks={onConnect:()=>{},onDisconnect:()=>{},onMessage:()=>{},onError:()=>{}};this.connected=false;this.roomId=null;this.username=null;this.messageInterval=null;}// Conectar ao serviço de multiplayer (simulado)\nconnect(callbacks){this.callbacks={...this.callbacks,...callbacks};// Simular conexão após um pequeno atraso\nsetTimeout(()=>{this.connected=true;if(this.callbacks.onConnect){this.callbacks.onConnect();}},500);return this;}// Desconectar do serviço\ndisconnect(){if(this.messageInterval){clearInterval(this.messageInterval);this.messageInterval=null;}// Simular saída da sala\nif(this.roomId&&this.username){this.leaveRoom();}// Simular desconexão após um pequeno atraso\nsetTimeout(()=>{this.connected=false;if(this.callbacks.onDisconnect){this.callbacks.onDisconnect();}},500);}// Entrar em uma sala\njoinRoom(roomId,username){if(!this.connected){if(this.callbacks.onError){this.callbacks.onError(new Error('Não conectado ao serviço multiplayer'));}return;}this.roomId=roomId;this.username=username;// Salvar informações da sala no localStorage\nlet rooms=this.getRooms();let room=rooms.find(r=>r.id===roomId);if(!room){room={id:roomId,players:[username],messages:[],createdAt:new Date().toISOString()};rooms.push(room);}else if(!room.players.includes(username)){room.players.push(username);}localStorage.setItem('multiplayer_rooms',JSON.stringify(rooms));// Notificar outros jogadores (simulado)\nthis.broadcastMessage({type:'join',senderId:username,roomId:roomId,content:{text:`${username} entrou na sala`},timestamp:new Date().toISOString()});// Simular mensagens de outros jogadores\nthis.simulateOtherPlayers();}// Sair de uma sala\nleaveRoom(){if(!this.roomId||!this.username)return;// Atualizar informações da sala\nlet rooms=this.getRooms();let roomIndex=rooms.findIndex(r=>r.id===this.roomId);if(roomIndex!==-1){let room=rooms[roomIndex];room.players=room.players.filter(player=>player!==this.username);// Se não houver mais jogadores, remover a sala\nif(room.players.length===0){rooms.splice(roomIndex,1);}else{rooms[roomIndex]=room;}localStorage.setItem('multiplayer_rooms',JSON.stringify(rooms));// Notificar outros jogadores\nthis.broadcastMessage({type:'leave',senderId:this.username,roomId:this.roomId,content:{text:`${this.username} saiu da sala`},timestamp:new Date().toISOString()});}this.roomId=null;this.username=null;}// Enviar movimento\nsendMove(cardId){if(!this.connected||!this.roomId||!this.username)return;this.broadcastMessage({type:'move',senderId:this.username,roomId:this.roomId,content:{cardId},timestamp:new Date().toISOString()});}// Enviar mensagem de chat\nsendChatMessage(text){if(!this.connected||!this.roomId||!this.username)return;const message={type:'chat',senderId:this.username,roomId:this.roomId,content:{text},timestamp:new Date().toISOString()};// Adicionar mensagem à sala\nlet rooms=this.getRooms();let room=rooms.find(r=>r.id===this.roomId);if(room){room.messages.push(message);localStorage.setItem('multiplayer_rooms',JSON.stringify(rooms));}// Notificar usuário atual e outros jogadores\nthis.callbacks.onMessage(message);this.broadcastMessage(message);}// Enviar mensagem genérica\nsendMessage(type,content){if(!this.connected||!this.roomId||!this.username)return;this.broadcastMessage({type,senderId:this.username,roomId:this.roomId,content,timestamp:new Date().toISOString()});}// Funções auxiliares\nbroadcastMessage(message){// Em um ambiente real, isso seria enviado através de websockets\n// Aqui apenas salvamos no localStorage para simular\nlet rooms=this.getRooms();let room=rooms.find(r=>r.id===message.roomId);if(room){room.messages.push(message);localStorage.setItem('multiplayer_rooms',JSON.stringify(rooms));// Simular recebimento por outros jogadores\nif(message.senderId!==this.username){if(this.callbacks.onMessage){this.callbacks.onMessage(message);}}}}getRooms(){const roomsStr=localStorage.getItem('multiplayer_rooms');return roomsStr?JSON.parse(roomsStr):[];}// Simulação de atividade de outros jogadores\nsimulateOtherPlayers(){if(this.messageInterval){clearInterval(this.messageInterval);}// Não simular nada no momento para simplificar\n}}export default new MultiplayerService();","map":{"version":3,"names":["MultiplayerService","constructor","callbacks","onConnect","onDisconnect","onMessage","onError","connected","roomId","username","messageInterval","connect","setTimeout","disconnect","clearInterval","leaveRoom","joinRoom","Error","rooms","getRooms","room","find","r","id","players","messages","createdAt","Date","toISOString","push","includes","localStorage","setItem","JSON","stringify","broadcastMessage","type","senderId","content","text","timestamp","simulateOtherPlayers","roomIndex","findIndex","filter","player","length","splice","sendMove","cardId","sendChatMessage","message","sendMessage","roomsStr","getItem","parse"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/services/MultiplayerService.js"],"sourcesContent":["// Simulação de serviço multiplayer usando localStorage para desenvolvimento\r\nclass MultiplayerService {\r\n  constructor() {\r\n    this.callbacks = {\r\n      onConnect: () => {},\r\n      onDisconnect: () => {},\r\n      onMessage: () => {},\r\n      onError: () => {}\r\n    };\r\n    this.connected = false;\r\n    this.roomId = null;\r\n    this.username = null;\r\n    this.messageInterval = null;\r\n  }\r\n\r\n  // Conectar ao serviço de multiplayer (simulado)\r\n  connect(callbacks) {\r\n    this.callbacks = { ...this.callbacks, ...callbacks };\r\n    \r\n    // Simular conexão após um pequeno atraso\r\n    setTimeout(() => {\r\n      this.connected = true;\r\n      if (this.callbacks.onConnect) {\r\n        this.callbacks.onConnect();\r\n      }\r\n    }, 500);\r\n    \r\n    return this;\r\n  }\r\n\r\n  // Desconectar do serviço\r\n  disconnect() {\r\n    if (this.messageInterval) {\r\n      clearInterval(this.messageInterval);\r\n      this.messageInterval = null;\r\n    }\r\n    \r\n    // Simular saída da sala\r\n    if (this.roomId && this.username) {\r\n      this.leaveRoom();\r\n    }\r\n    \r\n    // Simular desconexão após um pequeno atraso\r\n    setTimeout(() => {\r\n      this.connected = false;\r\n      if (this.callbacks.onDisconnect) {\r\n        this.callbacks.onDisconnect();\r\n      }\r\n    }, 500);\r\n  }\r\n\r\n  // Entrar em uma sala\r\n  joinRoom(roomId, username) {\r\n    if (!this.connected) {\r\n      if (this.callbacks.onError) {\r\n        this.callbacks.onError(new Error('Não conectado ao serviço multiplayer'));\r\n      }\r\n      return;\r\n    }\r\n    \r\n    this.roomId = roomId;\r\n    this.username = username;\r\n    \r\n    // Salvar informações da sala no localStorage\r\n    let rooms = this.getRooms();\r\n    let room = rooms.find(r => r.id === roomId);\r\n    \r\n    if (!room) {\r\n      room = {\r\n        id: roomId,\r\n        players: [username],\r\n        messages: [],\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      rooms.push(room);\r\n    } else if (!room.players.includes(username)) {\r\n      room.players.push(username);\r\n    }\r\n    \r\n    localStorage.setItem('multiplayer_rooms', JSON.stringify(rooms));\r\n    \r\n    // Notificar outros jogadores (simulado)\r\n    this.broadcastMessage({\r\n      type: 'join',\r\n      senderId: username,\r\n      roomId: roomId,\r\n      content: { text: `${username} entrou na sala` },\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    // Simular mensagens de outros jogadores\r\n    this.simulateOtherPlayers();\r\n  }\r\n\r\n  // Sair de uma sala\r\n  leaveRoom() {\r\n    if (!this.roomId || !this.username) return;\r\n    \r\n    // Atualizar informações da sala\r\n    let rooms = this.getRooms();\r\n    let roomIndex = rooms.findIndex(r => r.id === this.roomId);\r\n    \r\n    if (roomIndex !== -1) {\r\n      let room = rooms[roomIndex];\r\n      room.players = room.players.filter(player => player !== this.username);\r\n      \r\n      // Se não houver mais jogadores, remover a sala\r\n      if (room.players.length === 0) {\r\n        rooms.splice(roomIndex, 1);\r\n      } else {\r\n        rooms[roomIndex] = room;\r\n      }\r\n      \r\n      localStorage.setItem('multiplayer_rooms', JSON.stringify(rooms));\r\n      \r\n      // Notificar outros jogadores\r\n      this.broadcastMessage({\r\n        type: 'leave',\r\n        senderId: this.username,\r\n        roomId: this.roomId,\r\n        content: { text: `${this.username} saiu da sala` },\r\n        timestamp: new Date().toISOString()\r\n      });\r\n    }\r\n    \r\n    this.roomId = null;\r\n    this.username = null;\r\n  }\r\n\r\n  // Enviar movimento\r\n  sendMove(cardId) {\r\n    if (!this.connected || !this.roomId || !this.username) return;\r\n    \r\n    this.broadcastMessage({\r\n      type: 'move',\r\n      senderId: this.username,\r\n      roomId: this.roomId,\r\n      content: { cardId },\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  // Enviar mensagem de chat\r\n  sendChatMessage(text) {\r\n    if (!this.connected || !this.roomId || !this.username) return;\r\n    \r\n    const message = {\r\n      type: 'chat',\r\n      senderId: this.username,\r\n      roomId: this.roomId,\r\n      content: { text },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    // Adicionar mensagem à sala\r\n    let rooms = this.getRooms();\r\n    let room = rooms.find(r => r.id === this.roomId);\r\n    \r\n    if (room) {\r\n      room.messages.push(message);\r\n      localStorage.setItem('multiplayer_rooms', JSON.stringify(rooms));\r\n    }\r\n    \r\n    // Notificar usuário atual e outros jogadores\r\n    this.callbacks.onMessage(message);\r\n    this.broadcastMessage(message);\r\n  }\r\n\r\n  // Enviar mensagem genérica\r\n  sendMessage(type, content) {\r\n    if (!this.connected || !this.roomId || !this.username) return;\r\n    \r\n    this.broadcastMessage({\r\n      type,\r\n      senderId: this.username,\r\n      roomId: this.roomId,\r\n      content,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  // Funções auxiliares\r\n  broadcastMessage(message) {\r\n    // Em um ambiente real, isso seria enviado através de websockets\r\n    // Aqui apenas salvamos no localStorage para simular\r\n    let rooms = this.getRooms();\r\n    let room = rooms.find(r => r.id === message.roomId);\r\n    \r\n    if (room) {\r\n      room.messages.push(message);\r\n      localStorage.setItem('multiplayer_rooms', JSON.stringify(rooms));\r\n      \r\n      // Simular recebimento por outros jogadores\r\n      if (message.senderId !== this.username) {\r\n        if (this.callbacks.onMessage) {\r\n          this.callbacks.onMessage(message);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getRooms() {\r\n    const roomsStr = localStorage.getItem('multiplayer_rooms');\r\n    return roomsStr ? JSON.parse(roomsStr) : [];\r\n  }\r\n\r\n  // Simulação de atividade de outros jogadores\r\n  simulateOtherPlayers() {\r\n    if (this.messageInterval) {\r\n      clearInterval(this.messageInterval);\r\n    }\r\n    \r\n    // Não simular nada no momento para simplificar\r\n  }\r\n}\r\n\r\nexport default new MultiplayerService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
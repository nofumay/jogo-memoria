{"ast":null,"code":"// Serviço de temas para o jogo da memória\n// Usando simulação em localStorage para desenvolvimento\n\nclass ThemeService {\n  constructor() {\n    this.initializeDefaultThemes();\n  }\n\n  // Obter todos os temas\n  getAllThemes() {\n    return new Promise(resolve => {\n      const themes = this.getThemesFromStorage();\n      resolve(themes);\n    });\n  }\n\n  // Obter um tema específico pelo ID\n  getThemeById(themeId) {\n    return new Promise((resolve, reject) => {\n      const themes = this.getThemesFromStorage();\n      const theme = themes.find(t => t.id === parseInt(themeId) || t.id === themeId);\n      if (theme) {\n        resolve(theme);\n      } else {\n        reject(new Error(`Tema com ID ${themeId} não encontrado`));\n      }\n    });\n  }\n\n  // Obter cartas para um tema e dificuldade específicos\n  getCardsForTheme(themeId, difficulty) {\n    return new Promise((resolve, reject) => {\n      try {\n        const theme = this.getThemesFromStorage().find(t => t.id === parseInt(themeId) || t.id === themeId);\n        if (!theme) {\n          return reject(new Error(`Tema com ID ${themeId} não encontrado`));\n        }\n\n        // Determinar número de pares com base na dificuldade\n        let pairsCount;\n        switch (difficulty) {\n          case 'easy':\n            pairsCount = 4; // 8 cartas\n            break;\n          case 'medium':\n            pairsCount = 8; // 16 cartas\n            break;\n          case 'hard':\n            pairsCount = 12; // 24 cartas\n            break;\n          default:\n            pairsCount = 8;\n        }\n\n        // Garantir que temos símbolos suficientes\n        if (theme.symbols.length < pairsCount) {\n          return reject(new Error(`Tema não tem símbolos suficientes para a dificuldade ${difficulty}`));\n        }\n\n        // Selecionar símbolos aleatoriamente para o jogo\n        const gameSymbols = this.getRandomElements(theme.symbols, pairsCount);\n\n        // Criar pares de cartas (duplicando cada símbolo)\n        let cards = [];\n        gameSymbols.forEach((symbol, index) => {\n          // Primeira carta do par\n          cards.push({\n            id: `card-${index}-a`,\n            value: symbol,\n            isFlipped: false,\n            isMatched: false\n          });\n\n          // Segunda carta do par\n          cards.push({\n            id: `card-${index}-b`,\n            value: symbol,\n            isFlipped: false,\n            isMatched: false\n          });\n        });\n\n        // Embaralhar as cartas\n        cards = this.shuffleArray(cards);\n        resolve(cards);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  // Funções auxiliares\n  getThemesFromStorage() {\n    const themesStr = localStorage.getItem('memory_themes');\n    return themesStr ? JSON.parse(themesStr) : [];\n  }\n  getRandomElements(array, count) {\n    const shuffled = [...array].sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, count);\n  }\n  shuffleArray(array) {\n    const newArray = [...array];\n    for (let i = newArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n    return newArray;\n  }\n\n  // Inicializar temas padrão para desenvolvimento\n  initializeDefaultThemes() {\n    if (!localStorage.getItem('memory_themes')) {\n      const defaultThemes = [{\n        id: 1,\n        name: 'Emoji',\n        description: 'Tema com emojis divertidos',\n        symbols: ['😀', '😎', '🥳', '🚀', '🎮', '🍕', '🐱', '🐶', '🌈', '🌟', '🎵', '🎁', '🏆', '🍦']\n      }, {\n        id: 2,\n        name: 'Animais',\n        description: 'Tema com animais',\n        symbols: ['🐶', '🐱', '🐭', '🐹', '🐰', '🦊', '🐻', '🐼', '🐨', '🦁', '🐯', '🐸', '🐵', '🦄']\n      }, {\n        id: 3,\n        name: 'Comidas',\n        description: 'Tema com comidas',\n        symbols: ['🍎', '🍌', '🍓', '🍕', '🍔', '🍦', '🍩', '🍪', '🍫', '🍿', '🥗', '🍣', '🧁', '🥞']\n      }];\n      localStorage.setItem('memory_themes', JSON.stringify(defaultThemes));\n    }\n  }\n}\nexport default new ThemeService();","map":{"version":3,"names":["ThemeService","constructor","initializeDefaultThemes","getAllThemes","Promise","resolve","themes","getThemesFromStorage","getThemeById","themeId","reject","theme","find","t","id","parseInt","Error","getCardsForTheme","difficulty","pairsCount","symbols","length","gameSymbols","getRandomElements","cards","forEach","symbol","index","push","value","isFlipped","isMatched","shuffleArray","error","themesStr","localStorage","getItem","JSON","parse","array","count","shuffled","sort","Math","random","slice","newArray","i","j","floor","defaultThemes","name","description","setItem","stringify"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/services/ThemeService.js"],"sourcesContent":["// Serviço de temas para o jogo da memória\r\n// Usando simulação em localStorage para desenvolvimento\r\n\r\nclass ThemeService {\r\n  constructor() {\r\n    this.initializeDefaultThemes();\r\n  }\r\n\r\n  // Obter todos os temas\r\n  getAllThemes() {\r\n    return new Promise((resolve) => {\r\n      const themes = this.getThemesFromStorage();\r\n      resolve(themes);\r\n    });\r\n  }\r\n\r\n  // Obter um tema específico pelo ID\r\n  getThemeById(themeId) {\r\n    return new Promise((resolve, reject) => {\r\n      const themes = this.getThemesFromStorage();\r\n      const theme = themes.find(t => t.id === parseInt(themeId) || t.id === themeId);\r\n      \r\n      if (theme) {\r\n        resolve(theme);\r\n      } else {\r\n        reject(new Error(`Tema com ID ${themeId} não encontrado`));\r\n      }\r\n    });\r\n  }\r\n\r\n  // Obter cartas para um tema e dificuldade específicos\r\n  getCardsForTheme(themeId, difficulty) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const theme = this.getThemesFromStorage().find(t => \r\n          t.id === parseInt(themeId) || t.id === themeId\r\n        );\r\n        \r\n        if (!theme) {\r\n          return reject(new Error(`Tema com ID ${themeId} não encontrado`));\r\n        }\r\n        \r\n        // Determinar número de pares com base na dificuldade\r\n        let pairsCount;\r\n        switch (difficulty) {\r\n          case 'easy':\r\n            pairsCount = 4; // 8 cartas\r\n            break;\r\n          case 'medium':\r\n            pairsCount = 8; // 16 cartas\r\n            break;\r\n          case 'hard':\r\n            pairsCount = 12; // 24 cartas\r\n            break;\r\n          default:\r\n            pairsCount = 8;\r\n        }\r\n        \r\n        // Garantir que temos símbolos suficientes\r\n        if (theme.symbols.length < pairsCount) {\r\n          return reject(new Error(`Tema não tem símbolos suficientes para a dificuldade ${difficulty}`));\r\n        }\r\n        \r\n        // Selecionar símbolos aleatoriamente para o jogo\r\n        const gameSymbols = this.getRandomElements(theme.symbols, pairsCount);\r\n        \r\n        // Criar pares de cartas (duplicando cada símbolo)\r\n        let cards = [];\r\n        gameSymbols.forEach((symbol, index) => {\r\n          // Primeira carta do par\r\n          cards.push({\r\n            id: `card-${index}-a`,\r\n            value: symbol,\r\n            isFlipped: false,\r\n            isMatched: false\r\n          });\r\n          \r\n          // Segunda carta do par\r\n          cards.push({\r\n            id: `card-${index}-b`,\r\n            value: symbol,\r\n            isFlipped: false,\r\n            isMatched: false\r\n          });\r\n        });\r\n        \r\n        // Embaralhar as cartas\r\n        cards = this.shuffleArray(cards);\r\n        \r\n        resolve(cards);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Funções auxiliares\r\n  getThemesFromStorage() {\r\n    const themesStr = localStorage.getItem('memory_themes');\r\n    return themesStr ? JSON.parse(themesStr) : [];\r\n  }\r\n\r\n  getRandomElements(array, count) {\r\n    const shuffled = [...array].sort(() => 0.5 - Math.random());\r\n    return shuffled.slice(0, count);\r\n  }\r\n\r\n  shuffleArray(array) {\r\n    const newArray = [...array];\r\n    for (let i = newArray.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\r\n    }\r\n    return newArray;\r\n  }\r\n\r\n  // Inicializar temas padrão para desenvolvimento\r\n  initializeDefaultThemes() {\r\n    if (!localStorage.getItem('memory_themes')) {\r\n      const defaultThemes = [\r\n        {\r\n          id: 1,\r\n          name: 'Emoji',\r\n          description: 'Tema com emojis divertidos',\r\n          symbols: ['😀', '😎', '🥳', '🚀', '🎮', '🍕', '🐱', '🐶', '🌈', '🌟', '🎵', '🎁', '🏆', '🍦']\r\n        },\r\n        {\r\n          id: 2,\r\n          name: 'Animais',\r\n          description: 'Tema com animais',\r\n          symbols: ['🐶', '🐱', '🐭', '🐹', '🐰', '🦊', '🐻', '🐼', '🐨', '🦁', '🐯', '🐸', '🐵', '🦄']\r\n        },\r\n        {\r\n          id: 3,\r\n          name: 'Comidas',\r\n          description: 'Tema com comidas',\r\n          symbols: ['🍎', '🍌', '🍓', '🍕', '🍔', '🍦', '🍩', '🍪', '🍫', '🍿', '🥗', '🍣', '🧁', '🥞']\r\n        }\r\n      ];\r\n      \r\n      localStorage.setItem('memory_themes', JSON.stringify(defaultThemes));\r\n    }\r\n  }\r\n}\r\n\r\nexport default new ThemeService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
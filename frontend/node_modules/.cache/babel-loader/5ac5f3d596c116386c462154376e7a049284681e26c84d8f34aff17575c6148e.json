{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\blessing\\\\jogo-memoria\\\\frontend\\\\src\\\\components\\\\MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './MemoryGame.css';\nimport Card from './Card';\nimport ScorePanel from './ScorePanel';\nimport GameService from '../services/GameService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoryGame = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n  const [moves, setMoves] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    initGame();\n  }, []);\n  const initGame = async () => {\n    try {\n      setLoading(true);\n      const gameCards = await GameService.getCards();\n      setCards(gameCards);\n      setFlippedCards([]);\n      setMatchedPairs([]);\n      setMoves(0);\n      setGameOver(false);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Erro ao inicializar o jogo:\", error);\n      setLoading(false);\n    }\n  };\n  const handleCardClick = id => {\n    // Ignora cliques se o jogo estiver carregando, acabou, ou mais de duas cartas estiverem viradas\n    if (loading || gameOver || flippedCards.length >= 2 || matchedPairs.includes(id) || flippedCards.includes(id)) {\n      return;\n    }\n\n    // Adiciona a carta à lista de cartas viradas\n    const newFlippedCards = [...flippedCards, id];\n    setFlippedCards(newFlippedCards);\n\n    // Se esta é a segunda carta virada\n    if (newFlippedCards.length === 2) {\n      setMoves(moves + 1);\n      const [firstCardId, secondCardId] = newFlippedCards;\n      const firstCard = cards.find(card => card.id === firstCardId);\n      const secondCard = cards.find(card => card.id === secondCardId);\n\n      // Verifica se as cartas formam um par\n      if (firstCard.value === secondCard.value) {\n        // Adiciona as cartas à lista de pares formados\n        setMatchedPairs([...matchedPairs, firstCardId, secondCardId]);\n        setFlippedCards([]);\n\n        // Verifica se todas as cartas foram encontradas\n        if (matchedPairs.length + 2 === cards.length) {\n          setGameOver(true);\n          GameService.saveScore(moves);\n        }\n      } else {\n        // Se não formarem um par, vira as cartas de volta após um tempo\n        setTimeout(() => {\n          setFlippedCards([]);\n        }, 1000);\n      }\n    }\n  };\n  const restartGame = () => {\n    initGame();\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Carregando...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"memory-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Jogo da Mem\\xF3ria\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ScorePanel, {\n      moves: moves\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        id: card.id,\n        value: card.value,\n        isFlipped: flippedCards.includes(card.id) || matchedPairs.includes(card.id),\n        isMatched: matchedPairs.includes(card.id),\n        onClick: () => handleCardClick(card.id)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), gameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-over\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Parab\\xE9ns!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Voc\\xEA completou o jogo em \", moves, \" movimentos!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: restartGame,\n        children: \"Jogar Novamente\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"F96z28iU6XsFE1MWPIjb+xHTT44=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","Card","ScorePanel","GameService","jsxDEV","_jsxDEV","MemoryGame","_s","cards","setCards","flippedCards","setFlippedCards","matchedPairs","setMatchedPairs","moves","setMoves","gameOver","setGameOver","loading","setLoading","initGame","gameCards","getCards","error","console","handleCardClick","id","length","includes","newFlippedCards","firstCardId","secondCardId","firstCard","find","card","secondCard","value","saveScore","setTimeout","restartGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","isFlipped","isMatched","onClick","_c","$RefreshReg$"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './MemoryGame.css';\r\nimport Card from './Card';\r\nimport ScorePanel from './ScorePanel';\r\nimport GameService from '../services/GameService';\r\n\r\nconst MemoryGame = () => {\r\n  const [cards, setCards] = useState([]);\r\n  const [flippedCards, setFlippedCards] = useState([]);\r\n  const [matchedPairs, setMatchedPairs] = useState([]);\r\n  const [moves, setMoves] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  useEffect(() => {\r\n    initGame();\r\n  }, []);\r\n  \r\n  const initGame = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const gameCards = await GameService.getCards();\r\n      setCards(gameCards);\r\n      setFlippedCards([]);\r\n      setMatchedPairs([]);\r\n      setMoves(0);\r\n      setGameOver(false);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Erro ao inicializar o jogo:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const handleCardClick = (id) => {\r\n    // Ignora cliques se o jogo estiver carregando, acabou, ou mais de duas cartas estiverem viradas\r\n    if (loading || gameOver || flippedCards.length >= 2 || matchedPairs.includes(id) || flippedCards.includes(id)) {\r\n      return;\r\n    }\r\n    \r\n    // Adiciona a carta à lista de cartas viradas\r\n    const newFlippedCards = [...flippedCards, id];\r\n    setFlippedCards(newFlippedCards);\r\n    \r\n    // Se esta é a segunda carta virada\r\n    if (newFlippedCards.length === 2) {\r\n      setMoves(moves + 1);\r\n      \r\n      const [firstCardId, secondCardId] = newFlippedCards;\r\n      const firstCard = cards.find(card => card.id === firstCardId);\r\n      const secondCard = cards.find(card => card.id === secondCardId);\r\n      \r\n      // Verifica se as cartas formam um par\r\n      if (firstCard.value === secondCard.value) {\r\n        // Adiciona as cartas à lista de pares formados\r\n        setMatchedPairs([...matchedPairs, firstCardId, secondCardId]);\r\n        setFlippedCards([]);\r\n        \r\n        // Verifica se todas as cartas foram encontradas\r\n        if (matchedPairs.length + 2 === cards.length) {\r\n          setGameOver(true);\r\n          GameService.saveScore(moves);\r\n        }\r\n      } else {\r\n        // Se não formarem um par, vira as cartas de volta após um tempo\r\n        setTimeout(() => {\r\n          setFlippedCards([]);\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const restartGame = () => {\r\n    initGame();\r\n  };\r\n  \r\n  if (loading) {\r\n    return <div className=\"loading\">Carregando...</div>;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"memory-game\">\r\n      <h1>Jogo da Memória</h1>\r\n      <ScorePanel moves={moves} />\r\n      <div className=\"game-board\">\r\n        {cards.map(card => (\r\n          <Card \r\n            key={card.id} \r\n            id={card.id}\r\n            value={card.value}\r\n            isFlipped={flippedCards.includes(card.id) || matchedPairs.includes(card.id)}\r\n            isMatched={matchedPairs.includes(card.id)}\r\n            onClick={() => handleCardClick(card.id)}\r\n          />\r\n        ))}\r\n      </div>\r\n      {gameOver && (\r\n        <div className=\"game-over\">\r\n          <h2>Parabéns!</h2>\r\n          <p>Você completou o jogo em {moves} movimentos!</p>\r\n          <button onClick={restartGame}>Jogar Novamente</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MemoryGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./MemoryGame.css';import Card from'./Card';import ScorePanel from'./ScorePanel';import GameService from'../services/GameService';import MultiplayerService from'../services/MultiplayerService';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MemoryGame=()=>{const[cards,setCards]=useState([]);const[flippedCards,setFlippedCards]=useState([]);const[matchedPairs,setMatchedPairs]=useState([]);const[moves,setMoves]=useState(0);const[gameOver,setGameOver]=useState(false);const[loading,setLoading]=useState(true);const[multiplayerService,setMultiplayerService]=useState(null);useEffect(()=>{initGame();connectMultiplayerService();},[]);const initGame=async()=>{try{setLoading(true);const gameCards=await GameService.getCards();setCards(gameCards);setFlippedCards([]);setMatchedPairs([]);setMoves(0);setGameOver(false);setLoading(false);}catch(error){console.error(\"Erro ao inicializar o jogo:\",error);setLoading(false);}};const connectMultiplayerService=()=>{const service=new MultiplayerService();service.connect({onConnect:()=>{console.log('Conectado ao serviço de multiplayer');},onDisconnect:()=>{console.log('Desconectado do serviço de multiplayer');},onMessage:message=>{console.log('Mensagem recebida:',message);},onError:error=>{console.error('Erro ao se conectar ao serviço de multiplayer:',error);}});setMultiplayerService(service);};const handleCardClick=id=>{// Ignora cliques se o jogo estiver carregando, acabou, ou mais de duas cartas estiverem viradas\nif(loading||gameOver||flippedCards.length>=2||matchedPairs.includes(id)||flippedCards.includes(id)){return;}// Adiciona a carta à lista de cartas viradas\nconst newFlippedCards=[...flippedCards,id];setFlippedCards(newFlippedCards);// Se esta é a segunda carta virada\nif(newFlippedCards.length===2){setMoves(moves+1);const[firstCardId,secondCardId]=newFlippedCards;const firstCard=cards.find(card=>card.id===firstCardId);const secondCard=cards.find(card=>card.id===secondCardId);// Verifica se as cartas formam um par\nif(firstCard.value===secondCard.value){// Adiciona as cartas à lista de pares formados\nsetMatchedPairs([...matchedPairs,firstCardId,secondCardId]);setFlippedCards([]);// Verifica se todas as cartas foram encontradas\nif(matchedPairs.length+2===cards.length){setGameOver(true);GameService.saveScore(moves);}}else{// Se não formarem um par, vira as cartas de volta após um tempo\nsetTimeout(()=>{setFlippedCards([]);},1000);}}};const restartGame=()=>{initGame();};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Carregando...\"});}return/*#__PURE__*/_jsxs(\"div\",{className:\"memory-game\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Jogo da Mem\\xF3ria\"}),/*#__PURE__*/_jsx(ScorePanel,{moves:moves}),/*#__PURE__*/_jsx(\"div\",{className:\"game-board\",children:cards.map(card=>/*#__PURE__*/_jsx(Card,{id:card.id,value:card.value,isFlipped:flippedCards.includes(card.id)||matchedPairs.includes(card.id),isMatched:matchedPairs.includes(card.id),onClick:()=>handleCardClick(card.id)},card.id))}),gameOver&&/*#__PURE__*/_jsxs(\"div\",{className:\"game-over\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Parab\\xE9ns!\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Voc\\xEA completou o jogo em \",moves,\" movimentos!\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:restartGame,children:\"Jogar Novamente\"})]})]});};export default MemoryGame;","map":{"version":3,"names":["React","useState","useEffect","Card","ScorePanel","GameService","MultiplayerService","jsx","_jsx","jsxs","_jsxs","MemoryGame","cards","setCards","flippedCards","setFlippedCards","matchedPairs","setMatchedPairs","moves","setMoves","gameOver","setGameOver","loading","setLoading","multiplayerService","setMultiplayerService","initGame","connectMultiplayerService","gameCards","getCards","error","console","service","connect","onConnect","log","onDisconnect","onMessage","message","onError","handleCardClick","id","length","includes","newFlippedCards","firstCardId","secondCardId","firstCard","find","card","secondCard","value","saveScore","setTimeout","restartGame","className","children","map","isFlipped","isMatched","onClick"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './MemoryGame.css';\r\nimport Card from './Card';\r\nimport ScorePanel from './ScorePanel';\r\nimport GameService from '../services/GameService';\r\nimport MultiplayerService from '../services/MultiplayerService';\r\n\r\nconst MemoryGame = () => {\r\n  const [cards, setCards] = useState([]);\r\n  const [flippedCards, setFlippedCards] = useState([]);\r\n  const [matchedPairs, setMatchedPairs] = useState([]);\r\n  const [moves, setMoves] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [multiplayerService, setMultiplayerService] = useState(null);\r\n  \r\n  useEffect(() => {\r\n    initGame();\r\n    connectMultiplayerService();\r\n  }, []);\r\n  \r\n  const initGame = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const gameCards = await GameService.getCards();\r\n      setCards(gameCards);\r\n      setFlippedCards([]);\r\n      setMatchedPairs([]);\r\n      setMoves(0);\r\n      setGameOver(false);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error(\"Erro ao inicializar o jogo:\", error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const connectMultiplayerService = () => {\r\n    const service = new MultiplayerService();\r\n    service.connect({\r\n      onConnect: () => {\r\n        console.log('Conectado ao serviço de multiplayer');\r\n      },\r\n      onDisconnect: () => {\r\n        console.log('Desconectado do serviço de multiplayer');\r\n      },\r\n      onMessage: (message) => {\r\n        console.log('Mensagem recebida:', message);\r\n      },\r\n      onError: (error) => {\r\n        console.error('Erro ao se conectar ao serviço de multiplayer:', error);\r\n      }\r\n    });\r\n    setMultiplayerService(service);\r\n  };\r\n  \r\n  const handleCardClick = (id) => {\r\n    // Ignora cliques se o jogo estiver carregando, acabou, ou mais de duas cartas estiverem viradas\r\n    if (loading || gameOver || flippedCards.length >= 2 || matchedPairs.includes(id) || flippedCards.includes(id)) {\r\n      return;\r\n    }\r\n    \r\n    // Adiciona a carta à lista de cartas viradas\r\n    const newFlippedCards = [...flippedCards, id];\r\n    setFlippedCards(newFlippedCards);\r\n    \r\n    // Se esta é a segunda carta virada\r\n    if (newFlippedCards.length === 2) {\r\n      setMoves(moves + 1);\r\n      \r\n      const [firstCardId, secondCardId] = newFlippedCards;\r\n      const firstCard = cards.find(card => card.id === firstCardId);\r\n      const secondCard = cards.find(card => card.id === secondCardId);\r\n      \r\n      // Verifica se as cartas formam um par\r\n      if (firstCard.value === secondCard.value) {\r\n        // Adiciona as cartas à lista de pares formados\r\n        setMatchedPairs([...matchedPairs, firstCardId, secondCardId]);\r\n        setFlippedCards([]);\r\n        \r\n        // Verifica se todas as cartas foram encontradas\r\n        if (matchedPairs.length + 2 === cards.length) {\r\n          setGameOver(true);\r\n          GameService.saveScore(moves);\r\n        }\r\n      } else {\r\n        // Se não formarem um par, vira as cartas de volta após um tempo\r\n        setTimeout(() => {\r\n          setFlippedCards([]);\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n  \r\n  const restartGame = () => {\r\n    initGame();\r\n  };\r\n  \r\n  if (loading) {\r\n    return <div className=\"loading\">Carregando...</div>;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"memory-game\">\r\n      <h1>Jogo da Memória</h1>\r\n      <ScorePanel moves={moves} />\r\n      <div className=\"game-board\">\r\n        {cards.map(card => (\r\n          <Card \r\n            key={card.id} \r\n            id={card.id}\r\n            value={card.value}\r\n            isFlipped={flippedCards.includes(card.id) || matchedPairs.includes(card.id)}\r\n            isMatched={matchedPairs.includes(card.id)}\r\n            onClick={() => handleCardClick(card.id)}\r\n          />\r\n        ))}\r\n      </div>\r\n      {gameOver && (\r\n        <div className=\"game-over\">\r\n          <h2>Parabéns!</h2>\r\n          <p>Você completou o jogo em {moves} movimentos!</p>\r\n          <button onClick={restartGame}>Jogar Novamente</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MemoryGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
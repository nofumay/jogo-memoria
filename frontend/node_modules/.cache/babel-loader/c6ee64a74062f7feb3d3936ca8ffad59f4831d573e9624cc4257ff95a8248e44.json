{"ast":null,"code":"// Simulação de serviço multiplayer usando localStorage para desenvolvimento\nclass MultiplayerService {\n  constructor() {\n    this.callbacks = {\n      onConnect: () => {},\n      onDisconnect: () => {},\n      onMessage: () => {},\n      onError: () => {}\n    };\n    this.connected = false;\n    this.roomId = null;\n    this.username = null;\n    this.messageInterval = null;\n  }\n\n  // Conectar ao serviço de multiplayer (simulado)\n  connect(callbacks) {\n    this.callbacks = {\n      ...this.callbacks,\n      ...callbacks\n    };\n\n    // Simular conexão após um pequeno atraso\n    setTimeout(() => {\n      this.connected = true;\n      if (this.callbacks.onConnect) {\n        this.callbacks.onConnect();\n      }\n    }, 500);\n    return this;\n  }\n\n  // Desconectar do serviço\n  disconnect() {\n    if (this.messageInterval) {\n      clearInterval(this.messageInterval);\n      this.messageInterval = null;\n    }\n\n    // Simular saída da sala\n    if (this.roomId && this.username) {\n      this.leaveRoom();\n    }\n\n    // Simular desconexão após um pequeno atraso\n    setTimeout(() => {\n      this.connected = false;\n      if (this.callbacks.onDisconnect) {\n        this.callbacks.onDisconnect();\n      }\n    }, 500);\n  }\n\n  // Entrar em uma sala\n  joinRoom(roomId, username) {\n    if (!this.connected) {\n      if (this.callbacks.onError) {\n        this.callbacks.onError(new Error('Não conectado ao serviço multiplayer'));\n      }\n      return;\n    }\n    this.roomId = roomId;\n    this.username = username;\n\n    // Salvar informações da sala no localStorage\n    let rooms = this.getRooms();\n    let room = rooms.find(r => r.id === roomId);\n    if (!room) {\n      room = {\n        id: roomId,\n        players: [username],\n        messages: [],\n        createdAt: new Date().toISOString()\n      };\n      rooms.push(room);\n    } else if (!room.players.includes(username)) {\n      room.players.push(username);\n    }\n    localStorage.setItem('multiplayer_rooms', JSON.stringify(rooms));\n\n    // Notificar outros jogadores (simulado)\n    this.broadcastMessage({\n      type: 'join',\n      senderId: username,\n      roomId: roomId,\n      content: {\n        text: `${username} entrou na sala`\n      },\n      timestamp: new Date().toISOString()\n    });\n\n    // Simular mensagens de outros jogadores\n    this.simulateOtherPlayers();\n  }\n\n  // Sair de uma sala\n  leaveRoom() {\n    if (!this.roomId || !this.username) return;\n\n    // Atualizar informações da sala\n    let rooms = this.getRooms();\n    let roomIndex = rooms.findIndex(r => r.id === this.roomId);\n    if (roomIndex !== -1) {\n      let room = rooms[roomIndex];\n      room.players = room.players.filter(player => player !== this.username);\n\n      // Se não houver mais jogadores, remover a sala\n      if (room.players.length === 0) {\n        rooms.splice(roomIndex, 1);\n      } else {\n        rooms[roomIndex] = room;\n      }\n      localStorage.setItem('multiplayer_rooms', JSON.stringify(rooms));\n\n      // Notificar outros jogadores\n      this.broadcastMessage({\n        type: 'leave',\n        senderId: this.username,\n        roomId: this.roomId,\n        content: {\n          text: `${this.username} saiu da sala`\n        },\n        timestamp: new Date().toISOString()\n      });\n    }\n    this.roomId = null;\n    this.username = null;\n  }\n\n  // Enviar movimento\n  sendMove(cardId) {\n    if (!this.connected || !this.roomId || !this.username) return;\n    this.broadcastMessage({\n      type: 'move',\n      senderId: this.username,\n      roomId: this.roomId,\n      content: {\n        cardId\n      },\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Enviar mensagem de chat\n  sendChatMessage(text) {\n    if (!this.connected || !this.roomId || !this.username) return;\n    const message = {\n      type: 'chat',\n      senderId: this.username,\n      roomId: this.roomId,\n      content: {\n        text\n      },\n      timestamp: new Date().toISOString()\n    };\n\n    // Adicionar mensagem à sala\n    let rooms = this.getRooms();\n    let room = rooms.find(r => r.id === this.roomId);\n    if (room) {\n      room.messages.push(message);\n      localStorage.setItem('multiplayer_rooms', JSON.stringify(rooms));\n    }\n\n    // Notificar usuário atual e outros jogadores\n    this.callbacks.onMessage(message);\n    this.broadcastMessage(message);\n  }\n\n  // Enviar mensagem genérica\n  sendMessage(type, content) {\n    if (!this.connected || !this.roomId || !this.username) return;\n    this.broadcastMessage({\n      type,\n      senderId: this.username,\n      roomId: this.roomId,\n      content,\n      timestamp: new Date().toISOString()\n    });\n  }\n\n  // Funções auxiliares\n  broadcastMessage(message) {\n    // Em um ambiente real, isso seria enviado através de websockets\n    // Aqui apenas salvamos no localStorage para simular\n    let rooms = this.getRooms();\n    let room = rooms.find(r => r.id === message.roomId);\n    if (room) {\n      room.messages.push(message);\n      localStorage.setItem('multiplayer_rooms', JSON.stringify(rooms));\n\n      // Simular recebimento por outros jogadores\n      if (message.senderId !== this.username) {\n        if (this.callbacks.onMessage) {\n          this.callbacks.onMessage(message);\n        }\n      }\n    }\n  }\n  getRooms() {\n    const roomsStr = localStorage.getItem('multiplayer_rooms');\n    return roomsStr ? JSON.parse(roomsStr) : [];\n  }\n\n  // Simulação de atividade de outros jogadores\n  simulateOtherPlayers() {\n    if (this.messageInterval) {\n      clearInterval(this.messageInterval);\n    }\n\n    // Não simular nada no momento para simplificar\n  }\n}\nexport default new MultiplayerService();","map":{"version":3,"names":["MultiplayerService","constructor","callbacks","onConnect","onDisconnect","onMessage","onError","connected","roomId","username","messageInterval","connect","setTimeout","disconnect","clearInterval","leaveRoom","joinRoom","Error","rooms","getRooms","room","find","r","id","players","messages","createdAt","Date","toISOString","push","includes","localStorage","setItem","JSON","stringify","broadcastMessage","type","senderId","content","text","timestamp","simulateOtherPlayers","roomIndex","findIndex","filter","player","length","splice","sendMove","cardId","sendChatMessage","message","sendMessage","roomsStr","getItem","parse"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/services/MultiplayerService.js"],"sourcesContent":["// Simulação de serviço multiplayer usando localStorage para desenvolvimento\r\nclass MultiplayerService {\r\n  constructor() {\r\n    this.callbacks = {\r\n      onConnect: () => {},\r\n      onDisconnect: () => {},\r\n      onMessage: () => {},\r\n      onError: () => {}\r\n    };\r\n    this.connected = false;\r\n    this.roomId = null;\r\n    this.username = null;\r\n    this.messageInterval = null;\r\n  }\r\n\r\n  // Conectar ao serviço de multiplayer (simulado)\r\n  connect(callbacks) {\r\n    this.callbacks = { ...this.callbacks, ...callbacks };\r\n    \r\n    // Simular conexão após um pequeno atraso\r\n    setTimeout(() => {\r\n      this.connected = true;\r\n      if (this.callbacks.onConnect) {\r\n        this.callbacks.onConnect();\r\n      }\r\n    }, 500);\r\n    \r\n    return this;\r\n  }\r\n\r\n  // Desconectar do serviço\r\n  disconnect() {\r\n    if (this.messageInterval) {\r\n      clearInterval(this.messageInterval);\r\n      this.messageInterval = null;\r\n    }\r\n    \r\n    // Simular saída da sala\r\n    if (this.roomId && this.username) {\r\n      this.leaveRoom();\r\n    }\r\n    \r\n    // Simular desconexão após um pequeno atraso\r\n    setTimeout(() => {\r\n      this.connected = false;\r\n      if (this.callbacks.onDisconnect) {\r\n        this.callbacks.onDisconnect();\r\n      }\r\n    }, 500);\r\n  }\r\n\r\n  // Entrar em uma sala\r\n  joinRoom(roomId, username) {\r\n    if (!this.connected) {\r\n      if (this.callbacks.onError) {\r\n        this.callbacks.onError(new Error('Não conectado ao serviço multiplayer'));\r\n      }\r\n      return;\r\n    }\r\n    \r\n    this.roomId = roomId;\r\n    this.username = username;\r\n    \r\n    // Salvar informações da sala no localStorage\r\n    let rooms = this.getRooms();\r\n    let room = rooms.find(r => r.id === roomId);\r\n    \r\n    if (!room) {\r\n      room = {\r\n        id: roomId,\r\n        players: [username],\r\n        messages: [],\r\n        createdAt: new Date().toISOString()\r\n      };\r\n      rooms.push(room);\r\n    } else if (!room.players.includes(username)) {\r\n      room.players.push(username);\r\n    }\r\n    \r\n    localStorage.setItem('multiplayer_rooms', JSON.stringify(rooms));\r\n    \r\n    // Notificar outros jogadores (simulado)\r\n    this.broadcastMessage({\r\n      type: 'join',\r\n      senderId: username,\r\n      roomId: roomId,\r\n      content: { text: `${username} entrou na sala` },\r\n      timestamp: new Date().toISOString()\r\n    });\r\n    \r\n    // Simular mensagens de outros jogadores\r\n    this.simulateOtherPlayers();\r\n  }\r\n\r\n  // Sair de uma sala\r\n  leaveRoom() {\r\n    if (!this.roomId || !this.username) return;\r\n    \r\n    // Atualizar informações da sala\r\n    let rooms = this.getRooms();\r\n    let roomIndex = rooms.findIndex(r => r.id === this.roomId);\r\n    \r\n    if (roomIndex !== -1) {\r\n      let room = rooms[roomIndex];\r\n      room.players = room.players.filter(player => player !== this.username);\r\n      \r\n      // Se não houver mais jogadores, remover a sala\r\n      if (room.players.length === 0) {\r\n        rooms.splice(roomIndex, 1);\r\n      } else {\r\n        rooms[roomIndex] = room;\r\n      }\r\n      \r\n      localStorage.setItem('multiplayer_rooms', JSON.stringify(rooms));\r\n      \r\n      // Notificar outros jogadores\r\n      this.broadcastMessage({\r\n        type: 'leave',\r\n        senderId: this.username,\r\n        roomId: this.roomId,\r\n        content: { text: `${this.username} saiu da sala` },\r\n        timestamp: new Date().toISOString()\r\n      });\r\n    }\r\n    \r\n    this.roomId = null;\r\n    this.username = null;\r\n  }\r\n\r\n  // Enviar movimento\r\n  sendMove(cardId) {\r\n    if (!this.connected || !this.roomId || !this.username) return;\r\n    \r\n    this.broadcastMessage({\r\n      type: 'move',\r\n      senderId: this.username,\r\n      roomId: this.roomId,\r\n      content: { cardId },\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  // Enviar mensagem de chat\r\n  sendChatMessage(text) {\r\n    if (!this.connected || !this.roomId || !this.username) return;\r\n    \r\n    const message = {\r\n      type: 'chat',\r\n      senderId: this.username,\r\n      roomId: this.roomId,\r\n      content: { text },\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    // Adicionar mensagem à sala\r\n    let rooms = this.getRooms();\r\n    let room = rooms.find(r => r.id === this.roomId);\r\n    \r\n    if (room) {\r\n      room.messages.push(message);\r\n      localStorage.setItem('multiplayer_rooms', JSON.stringify(rooms));\r\n    }\r\n    \r\n    // Notificar usuário atual e outros jogadores\r\n    this.callbacks.onMessage(message);\r\n    this.broadcastMessage(message);\r\n  }\r\n\r\n  // Enviar mensagem genérica\r\n  sendMessage(type, content) {\r\n    if (!this.connected || !this.roomId || !this.username) return;\r\n    \r\n    this.broadcastMessage({\r\n      type,\r\n      senderId: this.username,\r\n      roomId: this.roomId,\r\n      content,\r\n      timestamp: new Date().toISOString()\r\n    });\r\n  }\r\n\r\n  // Funções auxiliares\r\n  broadcastMessage(message) {\r\n    // Em um ambiente real, isso seria enviado através de websockets\r\n    // Aqui apenas salvamos no localStorage para simular\r\n    let rooms = this.getRooms();\r\n    let room = rooms.find(r => r.id === message.roomId);\r\n    \r\n    if (room) {\r\n      room.messages.push(message);\r\n      localStorage.setItem('multiplayer_rooms', JSON.stringify(rooms));\r\n      \r\n      // Simular recebimento por outros jogadores\r\n      if (message.senderId !== this.username) {\r\n        if (this.callbacks.onMessage) {\r\n          this.callbacks.onMessage(message);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getRooms() {\r\n    const roomsStr = localStorage.getItem('multiplayer_rooms');\r\n    return roomsStr ? JSON.parse(roomsStr) : [];\r\n  }\r\n\r\n  // Simulação de atividade de outros jogadores\r\n  simulateOtherPlayers() {\r\n    if (this.messageInterval) {\r\n      clearInterval(this.messageInterval);\r\n    }\r\n    \r\n    // Não simular nada no momento para simplificar\r\n  }\r\n}\r\n\r\nexport default new MultiplayerService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
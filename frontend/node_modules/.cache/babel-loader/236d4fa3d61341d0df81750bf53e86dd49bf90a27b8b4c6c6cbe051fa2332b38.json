{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nconst API_BASE_URL = 'http://localhost:8080/api/auth';\nconst AuthService = {\n  register: async (username, password, email) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/register`, {\n        username,\n        password,\n        email\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao registrar usuário:', error);\n      throw error;\n    }\n  },\n  login: async (username, password) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/login`, {\n        username,\n        password\n      });\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n\n        // Decodificar token para obter informações do usuário\n        const decodedToken = jwtDecode(response.data.token);\n        localStorage.setItem('user', JSON.stringify({\n          username: decodedToken.sub\n        }));\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao fazer login:', error);\n      throw error;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  isAuthenticated: () => {\n    const token = localStorage.getItem('token');\n    if (!token) return false;\n    try {\n      const decodedToken = jwtDecode(token);\n      const currentTime = Date.now() / 1000;\n\n      // Verificar se o token não expirou\n      return decodedToken.exp > currentTime;\n    } catch (error) {\n      return false;\n    }\n  },\n  getAuthHeader: () => {\n    const token = localStorage.getItem('token');\n    return token ? {\n      Authorization: `Bearer ${token}`\n    } : {};\n  }\n};\nexport default AuthService;","map":{"version":3,"names":["axios","jwtDecode","API_BASE_URL","AuthService","register","username","password","email","response","post","data","error","console","login","token","localStorage","setItem","decodedToken","JSON","stringify","sub","logout","removeItem","getCurrentUser","user","getItem","parse","isAuthenticated","currentTime","Date","now","exp","getAuthHeader","Authorization"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api/auth';\r\n\r\nconst AuthService = {\r\n  register: async (username, password, email) => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/register`, {\r\n        username,\r\n        password,\r\n        email\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao registrar usuário:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  login: async (username, password) => {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/login`, {\r\n        username,\r\n        password\r\n      });\r\n      \r\n      if (response.data.token) {\r\n        localStorage.setItem('token', response.data.token);\r\n        \r\n        // Decodificar token para obter informações do usuário\r\n        const decodedToken = jwtDecode(response.data.token);\r\n        localStorage.setItem('user', JSON.stringify({\r\n          username: decodedToken.sub\r\n        }));\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erro ao fazer login:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    const user = localStorage.getItem('user');\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  isAuthenticated: () => {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) return false;\r\n    \r\n    try {\r\n      const decodedToken = jwtDecode(token);\r\n      const currentTime = Date.now() / 1000;\r\n      \r\n      // Verificar se o token não expirou\r\n      return decodedToken.exp > currentTime;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  getAuthHeader: () => {\r\n    const token = localStorage.getItem('token');\r\n    return token ? { Authorization: `Bearer ${token}` } : {};\r\n  }\r\n};\r\n\r\nexport default AuthService; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,MAAMC,YAAY,GAAG,gCAAgC;AAErD,MAAMC,WAAW,GAAG;EAClBC,QAAQ,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,EAAEC,KAAK,KAAK;IAC7C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGP,YAAY,WAAW,EAAE;QAC5DG,QAAQ;QACRC,QAAQ;QACRC;MACF,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDE,KAAK,EAAE,MAAAA,CAAOR,QAAQ,EAAEC,QAAQ,KAAK;IACnC,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGP,YAAY,QAAQ,EAAE;QACzDG,QAAQ;QACRC;MACF,CAAC,CAAC;MAEF,IAAIE,QAAQ,CAACE,IAAI,CAACI,KAAK,EAAE;QACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAER,QAAQ,CAACE,IAAI,CAACI,KAAK,CAAC;;QAElD;QACA,MAAMG,YAAY,GAAGhB,SAAS,CAACO,QAAQ,CAACE,IAAI,CAACI,KAAK,CAAC;QACnDC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEE,IAAI,CAACC,SAAS,CAAC;UAC1Cd,QAAQ,EAAEY,YAAY,CAACG;QACzB,CAAC,CAAC,CAAC;MACL;MAEA,OAAOZ,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAEDU,MAAM,EAAEA,CAAA,KAAM;IACZN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;IAChCP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAEDC,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMC,IAAI,GAAGT,YAAY,CAACU,OAAO,CAAC,MAAM,CAAC;IACzC,OAAOD,IAAI,GAAGN,IAAI,CAACQ,KAAK,CAACF,IAAI,CAAC,GAAG,IAAI;EACvC,CAAC;EAEDG,eAAe,EAAEA,CAAA,KAAM;IACrB,MAAMb,KAAK,GAAGC,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACX,KAAK,EAAE,OAAO,KAAK;IAExB,IAAI;MACF,MAAMG,YAAY,GAAGhB,SAAS,CAACa,KAAK,CAAC;MACrC,MAAMc,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;;MAErC;MACA,OAAOb,YAAY,CAACc,GAAG,GAAGH,WAAW;IACvC,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF,CAAC;EAEDqB,aAAa,EAAEA,CAAA,KAAM;IACnB,MAAMlB,KAAK,GAAGC,YAAY,CAACU,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOX,KAAK,GAAG;MAAEmB,aAAa,EAAE,UAAUnB,KAAK;IAAG,CAAC,GAAG,CAAC,CAAC;EAC1D;AACF,CAAC;AAED,eAAeX,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\nimport jwtDecode from 'jwt-decode';\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n// Para desenvolvimento, vamos implementar uma versão simples com localStorage\nclass AuthService {\n  register(username, password, email) {\n    // Em ambiente de produção, isso seria uma chamada à API\n    return new Promise((resolve, reject) => {\n      try {\n        // Verificar se o usuário já existe\n        const users = this.getAllUsers();\n        if (users.some(user => user.username === username)) {\n          return reject({\n            response: {\n              data: {\n                message: 'Nome de usuário já existe'\n              }\n            }\n          });\n        }\n        if (users.some(user => user.email === email)) {\n          return reject({\n            response: {\n              data: {\n                message: 'Email já cadastrado'\n              }\n            }\n          });\n        }\n\n        // Criar novo usuário\n        const newUser = {\n          id: Date.now(),\n          username,\n          email,\n          password,\n          // Em produção, a senha seria encriptada\n          createdAt: new Date().toISOString()\n        };\n\n        // Salvar no storage\n        users.push(newUser);\n        localStorage.setItem('users', JSON.stringify(users));\n        resolve({\n          user: {\n            ...newUser,\n            password: undefined\n          }\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  login(username, password) {\n    // Em ambiente de produção, isso seria uma chamada à API\n    return new Promise((resolve, reject) => {\n      try {\n        const users = this.getAllUsers();\n        const user = users.find(u => u.username === username && u.password === password);\n        if (!user) {\n          return reject({\n            response: {\n              data: {\n                message: 'Usuário ou senha inválidos'\n              }\n            }\n          });\n        }\n\n        // Criar objeto usuário sem a senha\n        const userObj = {\n          ...user,\n          password: undefined\n        };\n\n        // Simular JWT\n        const token = `mock-jwt-token-${Date.now()}`;\n\n        // Salvar no storage\n        localStorage.setItem('currentUser', JSON.stringify(userObj));\n        localStorage.setItem('token', token);\n        resolve({\n          user: userObj,\n          token\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('token');\n  }\n  getCurrentUser() {\n    const userStr = localStorage.getItem('currentUser');\n    if (!userStr) return null;\n    return JSON.parse(userStr);\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('token');\n  }\n  getAllUsers() {\n    const usersStr = localStorage.getItem('users');\n    return usersStr ? JSON.parse(usersStr) : [];\n  }\n\n  // Para testes e desenvolvimento\n  initializeDefaultUsers() {\n    if (!localStorage.getItem('users')) {\n      const defaultUsers = [{\n        id: 1,\n        username: 'jogador1',\n        email: 'jogador1@example.com',\n        password: 'senha123',\n        createdAt: new Date().toISOString()\n      }];\n      localStorage.setItem('users', JSON.stringify(defaultUsers));\n    }\n  }\n}\n\n// Inicializar usuários padrão\nconst authService = new AuthService();\nauthService.initializeDefaultUsers();\nexport default authService;","map":{"version":3,"names":["axios","jwtDecode","API_URL","process","env","REACT_APP_API_URL","AuthService","register","username","password","email","Promise","resolve","reject","users","getAllUsers","some","user","response","data","message","newUser","id","Date","now","createdAt","toISOString","push","localStorage","setItem","JSON","stringify","undefined","error","login","find","u","userObj","token","logout","removeItem","getCurrentUser","userStr","getItem","parse","isAuthenticated","usersStr","initializeDefaultUsers","defaultUsers","authService"],"sources":["C:/Users/blessing/jogo-memoria/frontend/src/services/AuthService.js"],"sourcesContent":["import axios from 'axios';\r\nimport jwtDecode from 'jwt-decode';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\n// Para desenvolvimento, vamos implementar uma versão simples com localStorage\r\nclass AuthService {\r\n  register(username, password, email) {\r\n    // Em ambiente de produção, isso seria uma chamada à API\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        // Verificar se o usuário já existe\r\n        const users = this.getAllUsers();\r\n        if (users.some(user => user.username === username)) {\r\n          return reject({ response: { data: { message: 'Nome de usuário já existe' } } });\r\n        }\r\n        \r\n        if (users.some(user => user.email === email)) {\r\n          return reject({ response: { data: { message: 'Email já cadastrado' } } });\r\n        }\r\n\r\n        // Criar novo usuário\r\n        const newUser = {\r\n          id: Date.now(),\r\n          username,\r\n          email,\r\n          password, // Em produção, a senha seria encriptada\r\n          createdAt: new Date().toISOString()\r\n        };\r\n\r\n        // Salvar no storage\r\n        users.push(newUser);\r\n        localStorage.setItem('users', JSON.stringify(users));\r\n\r\n        resolve({ user: { ...newUser, password: undefined } });\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  login(username, password) {\r\n    // Em ambiente de produção, isso seria uma chamada à API\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const users = this.getAllUsers();\r\n        const user = users.find(\r\n          u => u.username === username && u.password === password\r\n        );\r\n\r\n        if (!user) {\r\n          return reject({ response: { data: { message: 'Usuário ou senha inválidos' } } });\r\n        }\r\n\r\n        // Criar objeto usuário sem a senha\r\n        const userObj = { ...user, password: undefined };\r\n        \r\n        // Simular JWT\r\n        const token = `mock-jwt-token-${Date.now()}`;\r\n        \r\n        // Salvar no storage\r\n        localStorage.setItem('currentUser', JSON.stringify(userObj));\r\n        localStorage.setItem('token', token);\r\n\r\n        resolve({ user: userObj, token });\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    localStorage.removeItem('currentUser');\r\n    localStorage.removeItem('token');\r\n  }\r\n\r\n  getCurrentUser() {\r\n    const userStr = localStorage.getItem('currentUser');\r\n    if (!userStr) return null;\r\n    return JSON.parse(userStr);\r\n  }\r\n\r\n  isAuthenticated() {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n\r\n  getAllUsers() {\r\n    const usersStr = localStorage.getItem('users');\r\n    return usersStr ? JSON.parse(usersStr) : [];\r\n  }\r\n\r\n  // Para testes e desenvolvimento\r\n  initializeDefaultUsers() {\r\n    if (!localStorage.getItem('users')) {\r\n      const defaultUsers = [\r\n        {\r\n          id: 1,\r\n          username: 'jogador1',\r\n          email: 'jogador1@example.com',\r\n          password: 'senha123',\r\n          createdAt: new Date().toISOString()\r\n        }\r\n      ];\r\n      localStorage.setItem('users', JSON.stringify(defaultUsers));\r\n    }\r\n  }\r\n}\r\n\r\n// Inicializar usuários padrão\r\nconst authService = new AuthService();\r\nauthService.initializeDefaultUsers();\r\n\r\nexport default authService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}